# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
library(tidyverse)
options(scipen=999)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
library(readxl)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"))
df
View(df)
reticulate::repl_python()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("brms")
install.packages("brms",dependencies = TRUE)
install.packages("rstan",dependencies = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# Detach if loaded
if ("bayesintro" %in% (.packages())) {
detach(package:bayesintro, unload = TRUE)
}
# Uninstall if installed
if ("bayesintro" %in% installed.packages()) {
remove.packages("bayesintro")
}
# Install if not installed
if (!("devtools" %in% installed.packages())) {
install.packages("devtools")
}
# Load from GitHub
library(devtools)
devtools::install_github("denis-cohen/bayesintro")
# Load to library
library(bayesintro)
learnr::run_tutorial("00-00-int", package = "bayesintro")
learnr::run_tutorial("01-01-lec", package = "bayesintro")
# Load to library
library(bayesintro)
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
library(bayesintro)
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
library(synthpop)
ods <- SD2011
ods
str(ods)
vars <- c("sex", "age", "edu", "marital", "income", "ls", "wkabint")
ods <- SD2011[, vars]
str(ods)
str(ods)
ods <- SD2011
summary(ods)
exp(.1)
update
library(installr)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/comparison/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/ctgan/"
tables = "tables/ctgan/"
setwd(main_dir)
# Load original data ----
data <- c("sd2011_clean_small")
epochs = c(600)
copies = c(5)
df_comparison <- data.frame()
for (c in copies) {
for (d in data) {
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
df_ods <- read.csv(paste0(original_data,d,".csv")) # load original data
for (e in epochs) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_epochs_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
sds_list$syn[[j]] <- sds  # use when m>1
# sds_list$syn <- sds # use when m==1
}
df_temp <- compare(sds_list, df_ods)
df_compare <- data.frame(df_temp$tables) %>%
rownames_to_column(var = "data") %>%
pivot_longer(cols = starts_with(names(df_ods))) %>%
rename(pct = value) %>%
separate(name, into = c("variables", "value"), sep = "\\.\\.|\\.", remove = FALSE) %>%
mutate(contains_double_dot = if_else(str_detect(name, fixed("..")), 1, 0),
value_new = as.numeric(value),
value_new = as.character(if_else(contains_double_dot == 1, -1*value_new, value_new)),
value_new = if_else(is.na(value_new), value, value_new),
value_new = if_else(value_new == "miss", NA, value_new),
) %>%
select(-name,-contains_double_dot,-value) %>%
rename(value=value_new)
df_compare$epochs = e
df_compare$dataset = d
df_comparison <- rbind(df_comparison,df_compare)
}
}
}
# Graph ----
# Graph (select variables) ----
df_graph_data <- df_comparison %>%
filter(variables %in% c("weight","income","wkabdur","nofriend")) %>%
mutate(epochs = ifelse(data == "observed", yes = "observed", no = epochs))
df_graph_data$value <- factor(as.character(df_graph_data$value), levels = str_sort(unique(df_graph_data$value), numeric = TRUE))
df_graph_data$value <- fct_relevel(df_graph_data$value, "NA", after = Inf)
df_graph <- ggplot(df_graph_data, aes(x = value, y = pct, fill = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
facet_nested( ~ variables, scales = "free", labeller = labeller(.rows = label_both)) +
xlab("") +
ylab("Percent frequency (x 100)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
# text = element_text(size = 6),
# legend.margin = margin(t = -50),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_frequency_optimize_variables.pdf"), height = 4, width = 10)
# Graph (frequency - wkabdur) ----
df_sds <- data.frame()
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv")) # load original data
for (e in epochs) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_epochs_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
df_sds <- rbind(df_sds,sds)
}
}
}
}
ods <- data.frame(with(df_ods,table(wkabdur)))
names(ods)[1:2] <- c("value", "freq")
ods$data <- "observed"
sds <- data.frame(with(df_sds,table(wkabdur)))
names(sds)[1:2] <- c("value", "freq")
sds$data <- "synthetic"
sds
df_compare <- rbind(sds,ods) %>%
group_by(data) %>%
mutate(total = sum(freq),
pct = freq/total) %>%
ungroup()
df_graph <- ggplot(df_compare, aes(x = value, y = pct, fill = data, color = data, group = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_wkabdur.pdf"), height = 4, width = 6)
# Graph (frequency - nofriend) ----
ods <- data.frame(with(df_ods,table(nofriend)))
names(ods)[1:2] <- c("value", "freq")
ods$data <- "observed"
ods
sds <- data.frame(with(df_sds,table(nofriend)))
names(sds)[1:2] <- c("value", "freq")
sds$data <- "synthetic"
sds
df_compare <- rbind(sds,ods)%>%
mutate(value = round(as.numeric(as.character(value))),0) %>%
group_by(data,value) %>%
summarise(total_1 = sum(freq)) %>%
group_by(data) %>%
mutate(total_2 = sum(total_1),
pct = total_1/total_2) %>%
ungroup() %>%
filter(value<26)
head(df_compare,10)
df_graph <- ggplot(df_compare, aes(x = value, y = pct, fill = data, color = data, group = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_nofriend.pdf"), height = 4, width = 6)
df_sds <- data.frame()
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv")) # load original data
for (e in epochs) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_epochs_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
df_sds <- rbind(df_sds,sds)
}
}
}
}
ods <- data.frame(with(df_ods,table(wkabdur)))
names(ods)[1:2] <- c("value", "freq")
ods$data <- "observed"
sds <- data.frame(with(df_sds,table(wkabdur)))
names(sds)[1:2] <- c("value", "freq")
sds$data <- "synthetic"
sds
df_compare <- rbind(sds,ods) %>%
group_by(data) %>%
mutate(total = sum(freq),
pct = freq/total) %>%
ungroup()
df_graph <- ggplot(df_compare, aes(x = value, y = pct, fill = data, color = data, group = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_wkabdur.pdf"), height = 4, width = 6)
df_compare <- rbind(sds,ods) %>%
mutate(value = round(as.numeric(as.character(value))),0) %>%
group_by(data) %>%
mutate(total = sum(freq),
pct = freq/total) %>%
ungroup()
df_graph <- ggplot(df_compare, aes(x = value, y = pct, fill = data, color = data, group = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_wkabdur.pdf"), height = 4, width = 6)
summary(df_ods$nofriend)
df_compare
View(df_compare)
df_sds <- data.frame()
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv")) # load original data
df_ods$bmi <- with(df_ods,weight/(height^2)*10000)
for (e in epochs) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_epochs_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds$bmi <- with(sds,weight/(height^2)*10000)
sds <- sds %>%
mutate_if(is.character, as.factor)
df_sds <- rbind(df_sds,sds)
}
}
}
}
ods <- data.frame(with(df_ods,table(bmi)))
names(ods)[1:2] <- c("value", "freq")
ods$data <- "observed"
sds <- data.frame(with(df_sds,table(bmi)))
names(sds)[1:2] <- c("value", "freq")
sds$data <- "synthetic"
sds
df_compare <- rbind(sds,ods) %>%
mutate(value = round(as.numeric(as.character(value))),0) %>%
group_by(data) %>%
mutate(total = sum(freq),
pct = freq/total) %>%
ungroup()
df_graph <- ggplot(df_compare, aes(x = value, y = pct, fill = data, color = data, group = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_bmi.pdf"), height = 4, width = 6)
