legend.position = "bottom",
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
p
ggsave(p, filename = paste0(graphs,"graph_cart_histogram_compare.pdf"), height = 4, width = 6, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
df_frequency <- data.frame()
for (c in 1:10) {
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed)
sds <- sds$syn
# create seed
my.seed = my.seed + 1
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_cart_10.csv"), row.names = FALSE)
# Compare histogram ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_cart_10.csv"))
df_graph_sds <- df_frequency
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_histogram_compare_10_v1.pdf"), height = 4, width = 10, units = "in")
ggsave(df_graph, filename = paste0(graphs,"graph_cart_histogram_compare_10_v2.pdf"), height = 6, width = 6, units = "in")
# Create table ----
df_frequency <- df_graph_ods
df_frequency$pct <- NULL
df_frequency$n <- 0
df_frequency <- rbind(df_frequency,df_graph_sds)
df_frequency$type <- NULL
df_frequency <- df_frequency %>%
pivot_wider(names_from = "n", values_from = "Freq")
# Replace all NA values with 0
df_frequency <- df_frequency %>%
mutate(across(everything(), ~ replace_na(., 0)))
# Create the xtable object
latex_table <- xtable(df_frequency,digits = 0)
add_to_row <- list(
pos = list(0,0), # Add after \toprule
command = c(" & \\multicolumn{1}{l}{Original} & \\multicolumn{10}{c}{Synthetic Data} \\\\ \\cmidrule(lr){3-12}\n",
"Combine & 0 & 1 & 2 & 3 & 4 & 5 & 6 & 7 & 8 & 9 & 10 \\\\ \n")
)
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
file = paste0(tables,"table_frequency.tex"),
add.to.row = add_to_row)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Combinations ----
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Loop ----
df_frequency <- data.frame()
for (c in 1:10) {
for (r in 1:16) {
# create seed
my.seed = my.seed + 1
# Load original data
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Drop the last row
df_ods <- head(df_ods, -1)
# Set the last observation to last_record
last_record <- combinations[r,]
print(last_record)
df_ods[1000,] <- last_record
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, method = "cart")
sds <- sds$syn
df_sds <- sds
# Create a frequency table for released synthetic data
df_ods <- read.csv(paste0(synthetic_data,"synthpop_cart.csv"))
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency)) %>%
mutate(type = "released synthetic data",
n = c,
last_record = paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = ""))
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic data from attack"
df_sds_frequency$n <- c
df_sds_frequency$last_record <- paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = "")
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency,df_ods_frequency)
}
}
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_attacker_default.csv"), row.names = FALSE)
# Compare histogram ----
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_default.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic data from attack")
df_graph_ods <- df_frequency %>%
filter(type == "released synthetic data")
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,25)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default_v2.pdf"), height = 5, width = 5)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
cp = c("0.00000001", "0.0001", "0.01", "0.05")
df_frequency <- data.frame()
for (i in cp) {
for (n in 1:10) {
# create seed
my.seed = my.seed + 1
parameter = i
# Create fake synthetic data
# formals(syn.cart)
sds <- syn(df_ods, m = 1, seed = my.seed, cart.cp = parameter)
sds <- sds$syn
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- n
df_sds_frequency$cp <- parameter
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
}
head(df_frequency)
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_cart_modified_10_cp.csv"), row.names = FALSE)
# Compare histogram ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_cart_modified_10_cp.csv"))
df_graph_sds <- df_frequency
df_graph_sds
df_test <- data.frame()
for (i in cp) {
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_ods_frequency$cp <- i
df_test <- rbind(df_test,df_ods_frequency)
}
df_ods_frequency <- df_test
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
facet_wrap(~cp) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_modified_cp_histogram_compare_10_v2.pdf"), height = 4, width = 6, units = "in")
df_graph <-
ggplot() +
geom_bar(data = subset(df_graph_ods,cp=="0.00000001"), aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = subset(df_graph_sds,cp=="0.00000001"), aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_modified_cp_histogram_compare_10_v1.pdf"), height = 4, width = 6, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(car)
#functions
options(scipen=999)
# Load data ----
df_ods <- SD2011[, c("sex","edu","age","region","depress")]
df_ods <- na.omit(df_ods) %>%
select(region,sex,edu,age,depress) %>%
arrange(region,sex,edu,age,depress)
# original ----
s5 <- syn(df_ods, seed = 8564, m = 1, print.flag = FALSE)
t5 <- disclosure( s5, df_ods, keys = c("sex","edu","age","region"), target = "depress", print.flag = FALSE)
df_sds <- s5$syn %>%
select(region,sex,edu,age,depress) %>%
mutate(depress = 0) %>%
arrange(region,sex,edu,age,depress)
s6 <- s5
s6$syn$depress <- 0
t6 <- disclosure( s6, df_ods, keys = c("sex","edu","age","region"), target = "depress", print.flag = FALSE)
# risk measure ----
print(t5)
print(t6)
# Identity disclosure measures ----
# Calculate DiSCO by hand
# Step 1: Create composite key q for GT and SD
df_ods$q <- paste(df_ods$sex, df_ods$edu, df_ods$age, df_ods$region, sep = "_")
df_sds$q <- paste(df_sds$sex, df_sds$edu, df_sds$age, df_sds$region, sep = "_")
# Step 2: Calculate iS
# iS : Proportion of all records in GT whose  q  value is found in SD.
iS <- 100 * mean(df_ods$q %in% df_sds$q)
iS
# Step 3: Calculate DiS
# DiS : Proportion of all records in GT where  q  in SD is disclosive (i.e.,  t  values for  q  are constant in SD).
DiS <- 100 * mean(sapply(1:nrow(df_ods), function(i) {
q <- df_ods$q[i]
sd_subset <- df_sds[df_sds$q == q, ]
length(unique(sd_subset$depress)) == 1  # Check if t values are constant
}))
DiS
# Assuming df_ods and df_sds are the ground truth and synthetic data frames
# Step 1: Identify disclosive keys in SD
disclosive_keys <- df_sds %>%
group_by(q) %>%                # Group by composite key q
summarize(disclosive = n_distinct(depress) == 1, .groups = "drop") # Check if t is constant
# Step 2: Merge disclosive status back to GT (df_ods)
df_ods_dis <- df_ods %>%
left_join(disclosive_keys, by = "q") %>%
mutate(disclosive = ifelse(is.na(disclosive), FALSE, disclosive)) # Handle missing keys
df_ods_dis_true <- df_ods_dis %>%
filter(disclosive==TRUE)
# Step 3: Calculate DiS
DiS <- 100 * mean(df_ods_dis$disclosive)
DiS
# Step 4: Calculate DiSCO (Proportion of records in GT where q is disclosive and matches t in SD)
# DiSCO : Proportion of all records in GT where  q  in SD is disclosive and the disclosed  t  value matches the true  t  value in GT.
DiSCO <- 100 * mean(sapply(1:nrow(df_ods), function(i) {
q <- df_ods$q[i]
sd_subset <- df_sds[df_sds$q == q, ]
if (length(unique(sd_subset$depress)) == 1) {  # Check if q is disclosive
gt_value <- df_ods$depress[i]
sd_value <- unique(sd_subset$depress)
return(gt_value == sd_value)  # Check if t matches
} else {
return(FALSE)
}
}))
DiSCO
# Output the results
cat("iS:", iS, "%\n")
cat("DiS:", DiS, "%\n")
cat("DiSCO:", DiSCO, "%\n")
print(t5, to.print = c("attrib"))
print(t6, to.print = c("attrib"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Load data ----
ods <- SD2011[, c("sex", "age", "region","placesize","depress")]
# original ----
s5 <- syn(ods, seed = 8564, m = 5, print.flag = FALSE)
t5 <- disclosure( s5, ods, keys = c("sex", "age", "region", "placesize"), target = "depress", print.flag = FALSE)
t5
repU <- t5$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(t5$ident$UiO[1], repU, average_row)
DiSCO <- t5$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(t5$attrib$Dorig[1], DiSCO, average_row)
# create table
df_risk_1 <- data.frame(
data = c("Original data", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk_1,align = "llrr")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
file = paste0(tables,"table_disclosure_risk_sd2011_original.tex"))
# modified ----
s6 <- s5
for (c in 1:5) {
sds <- data.frame(s5$syn[c])
sds$depress <- 0
s6$syn[[c]] <- sds
}
t6 <- disclosure( s6, ods, keys = c("sex", "age", "region", "placesize"), target = "depress", print.flag = FALSE)
repU <- t6$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(t6$ident$UiO[1], repU, average_row)
DiSCO <- t6$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(t6$attrib$Dorig[1], DiSCO, average_row)
# create table
df_risk_2 <- data.frame(
data = c("Original data", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk_2,align = "llrr")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
file = paste0(tables,"table_disclosure_risk_sd2011_modified.tex"))
# combine ----
df_risk_1$type <- "Original"
df_risk_2$type <- "Modified"
df_risk <- rbind(df_risk_1,df_risk_2) %>%
pivot_longer(!c(data,type)) %>%
pivot_wider(names_from = c(name, type), values_from = c(value)) %>%
select(data, identity_Original, identity_Modified, attribute_Original, attribute_Modified)
df_risk
columns_header_top <- c("
\\toprule &
\\multicolumn{2}{l}{Identity risk} &
\\multicolumn{2}{l}{Attribute risk}
\\\\  \n
\\cmidrule(lr){2-3}
\\cmidrule(lr){4-5}
")
columns_header_mid <- c("
Data & Raab et al., 2024 & Modified & Raab et al., 2024 & Modified
\\\\ \n
\\midrule
")
notes <- c("\\bottomrule \\\\[-1.8ex] \\multicolumn{5}{p{4in}}{Note: Modified indicates that values of \\texttt{depress}=0  in synthetic data} \n")
# Create the xtable object
latex_table <- xtable(df_risk,align = "llrrrr")
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
add.to.row = list(
pos = list(0,0,7),
command = c(columns_header_top,
columns_header_mid,
notes)),
file = paste0(tables,"table_disclosure_risk_sd2011.tex"))
