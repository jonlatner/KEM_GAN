wages = ifelse(status == "unemployed", yes = 0,
ifelse(status == "nonstandard", yes = 100,
ifelse(status == "standard", yes = 150, no = NA))),
)
df_sel %>% print(n=24)
# 5b. Plot employment status over time for each individual
df_sel %>%
ggplot(aes(x = period, y = wages, group = factor(id), color = factor(status))) +
facet_grid(~id) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Employment Status Over Time by Individual",
x = "Time Period",
y = "Employment Status",
color = "Individual") +
theme_bw() +
theme(legend.position = "bottom")
# 6. Estimate Fixed Effects Model
fe_model_sel <- lm(wages ~ emp + nonstandard + factor(id), data = df_sel)
df_sel$yhat_fe <- predict(fe_model_sel)
# 7. Estimate DiD Model (only for treated vs. untreated)
did_model_sel <- lm(wages ~ treated * emp, data = df_sel)
df_sel$yhat_did <- predict(did_model_sel)
p <- ggplot(df_sel, aes(x = period)) +
geom_line(aes(y = wages, color = "Actual"), size = 1.2) +
geom_line(aes(y = yhat_fe, color = "Fitted (FE)"), linetype = "dashed", size = 1.2) +
geom_line(aes(y = yhat_did, color = "Fitted (DiD)"), linetype = "longdash", size = 1.2) +
facet_wrap(~id) +
geom_text(
data = df_sel %>% filter(period == 5),
aes(
y = yhat_fe + .75,
label = paste("hat(y)[fe]==", round(yhat_fe, 2))
),
size = 3.5,
parse = TRUE
) +
geom_text(
data = df_sel %>% filter(period == 5),
aes(
y = yhat_did - .5,
label = paste("hat(y)[DiD]==", round(yhat_did, 2))
),
size = 3.5,
parse = TRUE
) +
labs(
title = "Actual vs Fitted y by Individual",
y = "Cumulative Time in Standard Employment",
color = "Line"
) +
theme(legend.position = "bottom") +
theme_bw()
p
# 8. Visualize Estimates
# Tidy results for each model
tidy_did_sel <- tidy(did_model_sel)
tidy_fe_sel <- tidy(fe_model_sel)
# Extract just the interaction term
effects_df_sel <- bind_rows(
tidy_did_sel %>% filter(term == "treated:emp") %>% mutate(model = "DiD"),
tidy_fe_sel %>% filter(term == "nonstandard") %>% mutate(model = "Fixed Effects")
) %>%
select(model, estimate, std.error)
ggplot(effects_df_sel, aes(x = model, y = estimate)) +
geom_point(size = 3) +
geom_text(aes(label = round(estimate, 2)), hjust = -1.2, size = 4) +
# scale_y_continuous(limits = c(-5, 5), breaks = seq(-5,5,2)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# geom_errorbar(aes(ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error), width = 0.2) +
labs(title = "Treatment Effect Estimates: DiD vs FE", y = "Estimated Effect", x = "Model") +
theme_minimal()
View(df_simple)
# install.packages("mlogit") # uncomment if needed
library(dplyr)
library(tidyr)
library(mlogit)
install.packages("mlogit")
# install.packages("mlogit") # uncomment if needed
library(dplyr)
library(tidyr)
library(mlogit)
set.seed(1)
# 1) Occupations and a toy similarity matrix θ_ab (rows = origins a, cols = destinations b)
occ <- c("A","B","C")
Theta <- matrix(c(
1.00, 0.85, 0.20,   # from A to A,B,C
0.60, 1.00, 0.75,   # from B to A,B,C
0.15, 0.40, 1.00    # from C to A,B,C
), nrow = 3, byrow = TRUE, dimnames = list(occ, occ))
# 2) Tiny person-period panel with current origin occupation and EXP in that origin
#    Assume each row is a "choice occasion" where the worker could move to any b in {A,B,C}
people <- tibble(
id = c(1,1,  2,2),
t  = c(1,2,  1,2),
origin = c("A","A", "B","B"),
EXP    = c(1.0, 2.0, 0.5, 1.5)   # years in current low-wage origin occupation a
)
# 3) Realized destination choice (for illustration only)
#    In period t the worker either stays or moves; we code the realized b
#    These are the 1's in the choice indicator
people$dest_realized <- c("B","A",  "C","B")
# 4) Expand to the full origin–destination choice set: for each choice occasion, list all b
long <- people %>%
tidyr::crossing(dest = occ) %>%
mutate(choice = as.integer(dest == dest_realized)) %>%
# attach θ_ab for this origin–destination pair
rowwise() %>%
mutate(theta_ab = Theta[origin, dest]) %>%
ungroup() %>%
# cross-level interaction: EOI = EXP_i,a * θ_ab
mutate(EOI = EXP * theta_ab)
# 5) Add a simple destination characteristic (e.g., average wage level by dest)
#    This is an alternative-specific attribute that varies only by b, not by person.
dest_wage <- tibble(dest = occ, w_dest = c(12, 16, 20))  # say C is highest wage
long <- long %>% left_join(dest_wage, by = "dest")
# 6) Prepare data for mlogit: one row per alternative, with a choice flag
#    chid identifies the choice set (person × time). alt is the destination b.
long <- long %>%
mutate(chid = paste(id, t, sep = "_"),
alt  = dest)
ml <- mlogit.data(long,
choice = "choice",
shape  = "long",
chid.var = "chid",
alt.var  = "alt",
id.var   = "id")
# 7) Fit a multinomial conditional logit
#    Right-hand side includes alternative-specific vars: theta_ab, EOI, and w_dest.
#    Individual-specific EXP can enter on the second part of the formula (| EXP),
#    which gives it alternative-specific coefficients, but the key term is EOI.
fit <- mlogit(choice ~ theta_ab + EOI + w_dest | EXP, data = ml)
# ------------------------------------------------
# Toy Example: MCL with EXP x theta_ab Interaction
# Inspired by Mouw, Kalleberg & Schultz (2024)
# ------------------------------------------------
# Libraries
library(dplyr)
library(tidyr)
library(mlogit)
set.seed(42)
# 1. Occupations and similarity matrix θ_ab
occ <- c("A","B","C")
Theta <- matrix(c(
1.00, 0.85, 0.20,   # from A to A,B,C
0.60, 1.00, 0.75,   # from B to A,B,C
0.15, 0.40, 1.00    # from C to A,B,C
), nrow = 3, byrow = TRUE, dimnames = list(occ, occ))
# 2. Simulate 10 workers x 3 periods
n_workers <- 10
n_periods <- 3
rows <- list()
for (i in 1:n_workers) {
# Randomly assign initial origin
origin <- sample(occ, 1)
EXP <- runif(1, 0.5, 3.0)
for (t in 1:n_periods) {
# Random realized destination
dest_realized <- sample(occ, 1)
for (dest in occ) {
theta_ab <- Theta[origin, dest]
EOI <- EXP * theta_ab
choice <- ifelse(dest == dest_realized, 1, 0)
w_dest <- ifelse(dest == "A", 12,
ifelse(dest == "B", 16, 20))
rows[[length(rows)+1]] <- data.frame(
id = i, t = t, origin = origin,
EXP = EXP, dest = dest, choice = choice,
theta_ab = theta_ab, EOI = EOI, w_dest = w_dest
)
}
# Update origin and EXP for next period
origin <- dest_realized
EXP <- EXP + runif(1, 0.5, 1.0)
}
}
df <- do.call(rbind, rows)
# 3. Prepare data for mlogit
df$chid <- paste(df$id, df$t, sep = "_")
ml <- mlogit.data(df,
choice = "choice",
shape  = "long",
chid.var = "chid",
alt.var  = "dest",
id.var   = "id")
# 4. Estimate the model
fit <- mlogit(choice ~ theta_ab + EOI + w_dest | EXP, data = ml)
# ------------------------------------------------
# Toy Example: MCL with EXP x theta_ab Interaction
# Inspired by Mouw, Kalleberg & Schultz (2024)
# ------------------------------------------------
# Libraries
library(dplyr)
library(tidyr)
library(mlogit)
set.seed(42)
# 1. Occupations and similarity matrix θ_ab
occ <- c("A","B","C")
Theta <- matrix(c(
1.00, 0.85, 0.20,   # from A to A,B,C
0.60, 1.00, 0.75,   # from B to A,B,C
0.15, 0.40, 1.00    # from C to A,B,C
), nrow = 3, byrow = TRUE, dimnames = list(occ, occ))
# 2. Simulate 10 workers x 3 periods
n_workers <- 10
n_periods <- 3
rows <- list()
for (i in 1:n_workers) {
# Randomly assign initial origin
origin <- sample(occ, 1)
EXP <- runif(1, 0.5, 3.0)
for (t in 1:n_periods) {
# Random realized destination
dest_realized <- sample(occ, 1)
for (dest in occ) {
theta_ab <- Theta[origin, dest]
EOI <- EXP * theta_ab
choice <- ifelse(dest == dest_realized, 1, 0)
w_dest <- ifelse(dest == "A", 12,
ifelse(dest == "B", 16, 20))
rows[[length(rows)+1]] <- data.frame(
id = i, t = t, origin = origin,
EXP = EXP, dest = dest, choice = choice,
theta_ab = theta_ab, EOI = EOI, w_dest = w_dest
)
}
# Update origin and EXP for next period
origin <- dest_realized
EXP <- EXP + runif(1, 0.5, 1.0)
}
}
df <- do.call(rbind, rows)
# 3. Prepare data for mlogit
df$chid <- paste(df$id, df$t, sep = "_")
ml <- mlogit.data(df,
choice = "choice",
shape  = "long",
chid.var = "chid",
alt.var  = "dest",
id.var   = "id")
# 4. Estimate the model
fit <- mlogit(choice ~ theta_ab + EOI + w_dest | EXP, data = ml)
fit <- mlogit(choice ~ theta_ab + EOI + w_dest, data = ml)
View(people)
View(people)
View(ml)
View(ml)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# Load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Disclosure measures ----
sds <- syn(df_ods, m = 1, seed = my.seed)
# create summary table
t1 <- multi.disclosure(sds, df_ods, print.flag = FALSE, plot = TRUE, keys = c("var1", "var2", "var3"), target = "var4")
ident = print(t1, plot = FALSE, to.print = "ident")
attrib = print(t1, plot = FALSE, to.print = "attrib")
ttest <- print(t1, plot = FALSE, to.print = "allCAPs")
ttest <- print(t1, plot = FALSE, to.print = "TCAP")
ttest
df_risk <- data.frame(
data = c("Original", "Synthetic"),
identity = c(t1$ident.orig,t1$ident.syn),
attribute = c(t1$attrib.table$attrib.orig, t1$attrib.table$attrib.syn)
)
df_risk
# Create the xtable object
latex_table <- xtable(df_risk)
colnames(latex_table) <- c("Data", "Identity Risk ($repU$)", "Attribute Risk ($DiSCO$)")
print.xtable(latex_table,
include.rownames = FALSE,
floating = FALSE,
booktabs = TRUE,
sanitize.text.function = identity,
file = paste0(tables,"table_disclosure_risk_1.tex"))
# Create 10 synthetic data sets ----
df_sds <- syn(df_ods, m = 10)
for (c in 1:10) {
print(c)
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed)
df_sds$syn[[c]] <- sds$syn
# create seed
my.seed = my.seed + 1
}
# create summary table
t1 <- multi.disclosure(df_sds, df_ods, print.flag = FALSE, plot = TRUE, keys = c("var1", "var2", "var3"), target = "var4")
df_risk <- data.frame(
data = c("Original", "Synthetic"),
identity = c(t1$ident.orig,t1$ident.syn),
attribute = c(t1$attrib.table$attrib.orig, t1$attrib.table$attrib.syn)
)
df_risk
# Table ----
t1 <- disclosure(df_sds, df_ods, print.flag = FALSE, plot = TRUE, keys = c("var1", "var2", "var3"), target = "var4")
repU <- t1$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(0, repU, average_row)
DiSCO <- t1$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(0, DiSCO, average_row)
# create table
df_risk <- data.frame(
data = c("Original", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Synthetic 6", "Synthetic 7", "Synthetic 8", "Synthetic 9", "Synthetic 10", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk,align = "llrr")
colnames(latex_table) <- c("Data", "Identity Risk ($repU$)", "Attribute Risk ($DiSCO$)")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
sanitize.text.function = function(x) {x},
file = paste0(tables,"table_disclosure_risk_10.tex"),
add.to.row = list(pos = list(nrow(latex_table) - 1),
command = "\\midrule \n"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Load data ----
ods <- SD2011[, c("sex", "age", "region","placesize","depress")]
# original ----
s5 <- syn(ods, seed = 8564, m = 5, print.flag = FALSE)
t5 <- disclosure( s5, ods, keys = c("sex", "age", "region", "placesize"), target = "depress", print.flag = FALSE)
ttest1 <- print(t5, to.print = "allCAPs")
repU <- t5$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(t5$ident$UiO[1], repU, average_row)
DiSCO <- t5$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(t5$attrib$Dorig[1], DiSCO, average_row)
# create table
df_risk_1 <- data.frame(
data = c("Original data", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk_1,align = "llrr")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
file = paste0(tables,"table_disclosure_risk_sd2011_original.tex"))
# modified ----
s6 <- s5
for (c in 1:5) {
sds <- data.frame(s5$syn[c])
sds$depress <- 0
s6$syn[[c]] <- sds
}
t6 <- disclosure( s6, ods, keys = c("sex", "age", "region", "placesize"), target = "depress", print.flag = FALSE)
ttest2 <- print(t6, to.print = "allCAPs")
repU <- t6$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(t6$ident$UiO[1], repU, average_row)
DiSCO <- t6$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(t6$attrib$Dorig[1], DiSCO, average_row)
# create table
df_risk_2 <- data.frame(
data = c("Original data", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk_2,align = "llrr")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
sanitize.text.function = identity,
file = paste0(tables,"table_disclosure_risk_sd2011_modified.tex"))
# combine ----
df_risk_1$type <- "Original"
df_risk_2$type <- "Modified"
df_risk <- rbind(df_risk_1,df_risk_2) %>%
pivot_longer(!c(data,type)) %>%
pivot_wider(names_from = c(name, type), values_from = c(value)) %>%
select(data, identity_Original, identity_Modified, attribute_Original, attribute_Modified)
df_risk
columns_header_top <- c("
\\toprule &
\\multicolumn{2}{l}{Identity risk ($repU$)} &
\\multicolumn{2}{l}{Attribute risk ($DiSCO$)}
\\\\  \n
\\cmidrule(lr){2-3}
\\cmidrule(lr){4-5}
")
columns_header_mid <- c("
Data & Raab et al., 2024 & Modified & Raab et al., 2024 & Modified
\\\\ \n
\\midrule
")
notes <- c("\\bottomrule \\\\[-1.8ex] \\multicolumn{5}{p{5in}}{Note: Modified indicates that values of \\texttt{depress}=0 for all records in the synthetic data} \n")
notes_2 <- c("\\bottomrule \\\\[-1.8ex] \\multicolumn{5}{p{3in}}{Note: Modified indicates that values of \\texttt{depress}=0 for all records in the synthetic data} \n")
# Create the xtable object
latex_table <- xtable(df_risk,align = "llrrrr")
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
sanitize.text.function = identity,
add.to.row = list(
pos = list(0,0,1,6,7),
command = c(columns_header_top,
columns_header_mid,
"\\midrule\n",   # midrule on line 6
"\\midrule\n",   # midrule on line 6
notes)),
file = paste0(tables,"table_disclosure_risk_sd2011.tex"))
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
sanitize.text.function = identity,
add.to.row = list(
pos = list(0,0,1,6,7),
command = c(columns_header_top,
columns_header_mid,
"\\midrule\n",   # midrule on line 6
"\\midrule\n",   # midrule on line 6
notes_2)),
file = paste0(tables,"table_disclosure_risk_sd2011_v2.tex"))
ttest1$allCAPs
ttest2$allCAPs
notes_2 <- c("\\bottomrule \\\\[-1.8ex] \\multicolumn{5}{p{4in}}{Note: Modified indicates that values of \\texttt{depress}=0 for all records in the synthetic data} \n")
# Create the xtable object
latex_table <- xtable(df_risk,align = "llrrrr")
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
sanitize.text.function = identity,
add.to.row = list(
pos = list(0,0,1,6,7),
command = c(columns_header_top,
columns_header_mid,
"\\midrule\n",   # midrule on line 6
"\\midrule\n",   # midrule on line 6
notes)),
file = paste0(tables,"table_disclosure_risk_sd2011.tex"))
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
sanitize.text.function = identity,
add.to.row = list(
pos = list(0,0,1,6,7),
command = c(columns_header_top,
columns_header_mid,
"\\midrule\n",   # midrule on line 6
"\\midrule\n",   # midrule on line 6
notes_2)),
file = paste0(tables,"table_disclosure_risk_sd2011_v2.tex"))
ttest1$allCAPs
ttest2$allCAPs
