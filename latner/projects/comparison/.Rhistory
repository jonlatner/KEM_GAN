mutate(columns = "Dependent variable",
rows = "Synthetic data generator (SDG)") %>%
mutate(term = ifelse(term == "sexMALE", yes = "male",
ifelse(term == "eduPRIMARY/NO EDUCATION", yes = "primary.no.education",
ifelse(term == "eduSECONDARY", yes = "secondary",
ifelse(term == "eduVOCATIONAL/GRAMMAR", yes = "vocational.grammar", no = term)))))
df_graph <- ggplot(df_regression_data, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_nested(rows + sdg~columns+dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_regression_data
df_regression_data_2 <- df_regression_data %>%
select(term, estimate, std.error, type, model, dv, sdg)
df_regression_data_2
df_regression_data_2 <- df_regression_data %>%
select(term, estimate, std.error, type, model, dv, sdg) %>%
mutate(type = ifelse(type == synthetic, yes = sdg, no = type))
df_regression_data_2
df_regression_data_2 <- df_regression_data %>%
select(term, estimate, std.error, type, model, dv, sdg) %>%
mutate(type = ifelse(type == "synthetic", yes = sdg, no = type))
df_regression_data_2
df_regression_data_2 <- as.unique(df_regression_data_2)
df_regression_data_2
df_regression_data_2 <- as.unique(df_regression_data_2)
df_regression_data_2 <- unique(df_regression_data_2)
df_regression_data_2
df_graph <- ggplot(df_regression_data, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
table(df_regression_data_2$type)
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_regression_data_2$type$name <- factor(df_regression_data_2$type,
levels = c("observed", "ctgan", "datasynthesizer", "synthpop"))
df_regression_data_2$type <- factor(df_regression_data_2$type,
levels = c("observed", "ctgan", "datasynthesizer", "synthpop"))
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
# scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
# guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_regression_data_2$type <- factor(df_regression_data_2$type,
levels = c("synthpop", "datasynthesizer", "ctgan", "observed"))
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
# guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, shape = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(shape = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_regression_data_2, aes(x = estimate, y = term, color = type)) +
geom_point(position = position_dodge(width = 0.9)) +
geom_errorbarh(aes(xmin = estimate - 1.96*std.error, xmax = estimate + 1.96*std.error), height = 0, position = position_dodge(width = 0.9)) +
labs(x = "Estimated Coefficients", y = "Independent Variables") +
facet_wrap(~ dv) +
scale_y_discrete(limits = rev(unique(df_regression_data$term))) +
theme_bw() +
geom_vline(xintercept = 0, linetype = "solid", color = "red") +
guides(color = guide_legend(reverse = TRUE)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_utility_regression.pdf"), height = 4, width = 8)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/comparison/"
setwd(main_dir)
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/datasynthesizer/"
tables = "tables/datasynthesizer/"
#functions
options(scipen=999)
# Load utility from datasynthesizer data ----
parents = c(0,1,2,3)
privacy = c(0)
data <- c("sd2011","sd2011_clean","sd2011_clean_small","sd2011_clean_small_categorical")
data <- c("sd2011_clean_small")
df_comparison_single <- data.frame()
df_fidelity_plot <- data.frame()
# multiple copies
c=5
df_comparison_multiple <- data.frame()
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in privacy) {
for (k in parents) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_datasynthesizer_",d,"_k_",k,"_e_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
sds_list$syn[[j]] <- sds  # use when m>1
# sds_list$syn <- sds # use when m==1
}
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 3)
output <- data.frame(data = d,
copies = c,
privacy = as.character(e),
parents = as.character(k),
pmse = mean(as.numeric(utility_measure$pMSE)),
specks = mean(as.numeric(utility_measure$SPECKS)))
df_comparison_multiple <- rbind(df_comparison_multiple,output)
utility <- utility.tables(sds_list, df_ods, tables = "twoway")
utility_plot <- data.frame(utility$utility.plot$data)
utility_plot$copies <- c
utility_plot$privacy <- e
utility_plot$parents <- k
utility_plot$data <- d
df_fidelity_plot <- rbind(df_fidelity_plot,utility_plot)
}
}
}
df_comparison <- rbind(df_comparison_single,df_comparison_multiple)%>%
arrange(data,copies,privacy)
write.csv(df_comparison, paste0(tables,"datasynthesizer_fidelity_optimize_dataset.csv"), row.names=FALSE)
write.csv(df_fidelity_plot, paste0(tables,"datasynthesizer_fidelity_twoway_dataset.csv"), row.names=FALSE)
# Graph ----
df_comparison <- read.csv(paste0(tables,"datasynthesizer_fidelity_optimize_dataset.csv"))
df_comparison$copies <- factor(as.character(df_comparison$copies))
df_comparison$parents <- factor(as.character(df_comparison$parents))
df_comparison <- df_comparison %>%
filter(parents != "0") %>%
filter(copies == 5) %>%
filter(data == "sd2011_clean_small") %>%
pivot_longer(!c(data,copies,privacy,parents), names_to = "utility", values_to = "values")
df_graph <- ggplot(df_comparison, aes(x = parents, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ utility, labeller = labeller(.rows = label_both)) +
# ylab("Kolmogorov-Smirnov (lower is better)") +
theme_bw() +
ylim(0,1.25)+
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"datasynthesizer_fidelity_optimize_dataset.pdf"), height = 4, width = 6)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(xtable)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/comparison/"
setwd(main_dir)
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/datasynthesizer/"
tables = "tables/datasynthesizer/"
graphs = "graphs/datasynthesizer/"
#functions
options(scipen=999)
# Load utility from datasynthesizer data ----
parents = c(0,1,2,3)
privacy = c(0)
data <- c("sd2011","sd2011_clean","sd2011_clean_small","sd2011_clean_small_categorical")
data <- c("sd2011_clean_small")
# 1 copy
# multiple copies
c=5
df_comparison <- data.frame()
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in privacy) {
for (k in parents) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_datasynthesizer_",d,"_k_",k,"_e_",e,"_m_",c,"_n_",j,".csv"))
sds <- sds %>%
mutate_if(is.character, as.factor)
sds_list$syn[[j]] <- sds  # use when m>1
# sds_list$syn <- sds # use when m==1
}
df_compare <- compare(sds_list,df_ods,utility.stats = "all")
specks <- df_compare$tab.utility[,4]
output <- data.frame(specks)
output$variables <- rownames(output)
rownames(output) <- NULL
output$data = d
output$copies = c
output$parents = k
output$privacy = e
df_comparison <- rbind(df_comparison,output)
}
}
}
write.csv(df_comparison, paste0(tables,"datasynthesizer_fidelity_optimize_variables.csv"), row.names=FALSE)
# Graph ----
df_comparison <- read.csv(paste0(tables,"datasynthesizer_fidelity_optimize_variables.csv"))
df_comparison$variables <- factor(as.character(df_comparison$variables))
df_comparison$parents <- factor(as.character(df_comparison$parents))
df_comparison <- df_comparison %>%
filter(data == "sd2011_clean_small")
df_graph <- ggplot(df_comparison, aes(x = variables, y = specks, fill = parents)) +
geom_bar(stat="identity",position = position_dodge2()) +
# facet_wrap( ~ data, labeller = labeller(.rows = label_both), scales = "free_y", nrow = 4) +
# ylab("Kolmogorov-Smirnov (lower is better)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
# legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"datasynthesizer_fidelity_optimize_variables.pdf"), height = 4, width = 6)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/comparison/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/datasynthesizer/"
tables = "tables/datasynthesizer/"
setwd(main_dir)
# Load synthetic data ----
data <- c("sd2011_clean_small")
parents = c(1, 2, 3)
privacy = c(0)
copies = c(5)
df_comparison <- data.frame()
for (c in copies) {
for (d in data) {
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
df_ods <- read.csv(paste0(original_data,d,".csv")) # load original data
for (e in privacy) {
for (k in parents) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_datasynthesizer_",d,"_k_",k,"_e_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
sds_list$syn[[j]] <- sds  # use when m>1
# sds_list$syn <- sds # use when m==1
}
df_temp <- compare(sds_list, df_ods)
df_compare <- data.frame(df_temp$tables) %>%
rownames_to_column(var = "data") %>%
pivot_longer(cols = starts_with(names(df_ods))) %>%
rename(pct = value) %>%
# separate(name, into = c("variables", "value"), sep = "\\.\\.|\\.", remove = FALSE)
separate(name, into = c("variables", "value"), sep = "\\.\\.|\\.", remove = FALSE, extra = "merge") %>%
mutate(contains_double_dot = if_else(str_detect(name, fixed("..")), 1, 0),
value_new = as.numeric(value),
value_new = as.character(if_else(contains_double_dot == 1, -1*value_new, value_new)),
value_new = if_else(is.na(value_new), value, value_new),
value_new = if_else(value_new == "miss", NA, value_new),
) %>%
select(-name,-contains_double_dot,-value) %>%
rename(value=value_new) %>%
mutate(value = ifelse(value=="miss.NA", yes = "NA", no = value))
df_compare$parents = k
df_compare$privacy = e
df_compare$dataset = d
df_comparison <- rbind(df_comparison,df_compare)
}
}
}
}
# Graph ----
# this function rounds .5 up to the nearest whole number
round2 = function(x, digits) {
posneg = sign(x)
z = abs(x)*10^digits
z = z + 0.5 + sqrt(.Machine$double.eps)
z = trunc(z)
z = z/10^digits
z*posneg
}
# this cleans the value levels so that months are whole numbers and other values remain the same
df_graph_data <- df_comparison %>%
filter(variables %in% c("age","income","height","weight","wkabdur","mmarital","mmarr","msepdiv")) %>%
# filter(variables %in% c("mmarr","msepdiv")) %>%
mutate(drop = ifelse((variables == "mmarr" | variables == "msepdiv") & pct == 0, yes = 1, no = 0)) %>%
filter(drop == 0) %>%
mutate(value2 = ifelse((variables == "mmarr" | variables == "msepdiv"), yes = round2(as.numeric(as.character(value)),0), no = NA)) %>%
mutate(value = ifelse(!is.na(value2), yes = as.character(value2), no = as.character(value))) %>%
filter(dataset == "sd2011_clean_small")
df_graph_data %>% filter(variables %in% c("mmarr","msepdiv")) %>% print(n=15)
df_graph_data$value <- factor(as.character(df_graph_data$value), levels = str_sort(unique(df_graph_data$value), numeric = TRUE))
df_graph_data$value <- fct_relevel(df_graph_data$value, "NA", after = Inf)
df_graph <- ggplot(df_graph_data, aes(x = value, y = pct, fill = data)) +
geom_bar(position = position_dodge(width = .9), stat = "identity") +
facet_nested(parents ~ variables, scales = "free", labeller = labeller(.rows = label_both)) +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, vjust = .5),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"datasynthesizer_frequency_optimize_variables.pdf"), height = 4, width = 6)
