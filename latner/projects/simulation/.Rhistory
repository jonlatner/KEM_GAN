main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods$combine <- paste(df_ods$var1, df_ods$var2, df_ods$var3, df_ods$var4, sep = "")
df_ods <- df_ods %>%
select(-matches("var"))
df_ods <- as.data.frame(table(df_ods)) %>%
rename(value=Freq) %>%
mutate(type = "original")
# Generate laplace noise ----
epsilon <- c(.01,.1,.25,.5,1)
# epsilon <- c(.01)
df_frequency_sds <- data.frame()
df_frequency_ods <- data.frame()
for (e in epsilon) {
for (c in 1:5) {
# create seed
my.seed = my.seed + 1
# Parameters for the Laplace distribution
location <- 0  # Mean (location parameter)
sensitivity <- 1 # this is always 1 in integer counting queries (if integers were 2,4,6,etc., then sensitivity would be 2)
b <- sensitivity/e # scale parameter
# Generate Laplace noise for each value in n
laplace_noise <- rlaplace(nrow(df_ods), location, b)
# Add the noise to the n column
sds <- df_ods
sds$value <- sds$value + laplace_noise
sds <- sds %>%
mutate(type = "synthetic",
dp = e)
df_frequency_sds <- rbind(df_frequency_sds,sds)
}
# histogram for original data
ods <- df_ods
ods$dp = e
df_frequency_ods <- rbind(df_frequency_ods,ods)
}
# Compare histogram ----
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(df_graph, filename = paste0(graphs,"graph_numeric_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(ggh4x)
library(VGAM)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods$combine <- paste(df_ods$var1, df_ods$var2, df_ods$var3, df_ods$var4, sep = "")
df_ods <- df_ods %>%
select(-matches("var"))
df_ods <- as.data.frame(table(df_ods)) %>%
rename(value=Freq) %>%
mutate(type = "original")
# Generate laplace noise ----
epsilon <- c(.01,.1,.25,.5,1)
# epsilon <- c(.01)
df_frequency_sds <- data.frame()
df_frequency_ods <- data.frame()
for (e in epsilon) {
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Parameters for the Laplace distribution
location <- 0  # Mean (location parameter)
sensitivity <- 1 # this is always 1 in integer counting queries (if integers were 2,4,6,etc., then sensitivity would be 2)
b <- sensitivity/e # scale parameter
# Generate Laplace noise for each value in n
laplace_noise <- rlaplace(nrow(df_ods), location, b)
# Add the noise to the n column
sds <- df_ods
sds$value <- sds$value + laplace_noise
sds <- sds %>%
mutate(type = "synthetic",
dp = e)
df_frequency_sds <- rbind(df_frequency_sds,sds)
}
# histogram for original data
ods <- df_ods
ods$dp = e
df_frequency_ods <- rbind(df_frequency_ods,ods)
}
# Compare histogram ----
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(df_graph, filename = paste0(graphs,"graph_numeric_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(ggh4x)
library(VGAM)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods$combine <- paste(df_ods$var1, df_ods$var2, df_ods$var3, df_ods$var4, sep = "")
df_ods <- df_ods %>%
select(-matches("var"))
df_ods <- as.data.frame(table(df_ods)) %>%
rename(value=Freq) %>%
mutate(type = "original")
# Generate laplace noise ----
epsilon <- c(.01,.1,.25,.5)
# epsilon <- c(.01)
df_frequency_sds <- data.frame()
df_frequency_ods <- data.frame()
for (e in epsilon) {
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Parameters for the Laplace distribution
location <- 0  # Mean (location parameter)
sensitivity <- 1 # this is always 1 in integer counting queries (if integers were 2,4,6,etc., then sensitivity would be 2)
b <- sensitivity/e # scale parameter
# Generate Laplace noise for each value in n
laplace_noise <- rlaplace(nrow(df_ods), location, b)
# Add the noise to the n column
sds <- df_ods
sds$value <- sds$value + laplace_noise
sds <- sds %>%
mutate(type = "synthetic",
dp = e)
df_frequency_sds <- rbind(df_frequency_sds,sds)
}
# histogram for original data
ods <- df_ods
ods$dp = e
df_frequency_ods <- rbind(df_frequency_ods,ods)
}
# Compare histogram ----
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(df_graph, filename = paste0(graphs,"graph_numeric_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(ggh4x)
library(VGAM)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods$combine <- paste(df_ods$var1, df_ods$var2, df_ods$var3, df_ods$var4, sep = "")
df_ods <- df_ods %>%
select(-matches("var"))
df_ods <- as.data.frame(table(df_ods)) %>%
rename(value=Freq) %>%
mutate(type = "original")
# Generate laplace noise ----
epsilon <- c(.01,.1,.25,.5)
# epsilon <- c(.01)
df_frequency_sds <- data.frame()
df_frequency_ods <- data.frame()
for (e in epsilon) {
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Parameters for the Laplace distribution
location <- 0  # Mean (location parameter)
sensitivity <- 1 # this is always 1 in integer counting queries (if integers were 2,4,6,etc., then sensitivity would be 2)
b <- sensitivity/e # scale parameter
# Generate Laplace noise for each value in n
laplace_noise <- rlaplace(nrow(df_ods), location, b)
# Add the noise to the n column
sds <- df_ods
sds$value <- sds$value + laplace_noise
sds <- sds %>%
mutate(type = "synthetic",
dp = e)
df_frequency_sds <- rbind(df_frequency_sds,sds)
}
# histogram for original data
ods <- df_ods
ods$dp = e
df_frequency_ods <- rbind(df_frequency_ods,ods)
}
# Compare histogram ----
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_dp_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(ggh4x)
library(VGAM)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods$combine <- paste(df_ods$var1, df_ods$var2, df_ods$var3, df_ods$var4, sep = "")
df_ods <- df_ods %>%
select(-matches("var"))
df_ods <- as.data.frame(table(df_ods)) %>%
rename(value=Freq) %>%
mutate(type = "original")
# Generate laplace noise ----
epsilon <- c(.01,.1,.25,.5)
# epsilon <- c(.01)
df_frequency_sds <- data.frame()
df_frequency_ods <- data.frame()
for (e in epsilon) {
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Parameters for the Laplace distribution
location <- 0  # Mean (location parameter)
sensitivity <- 1 # this is always 1 in integer counting queries (if integers were 2,4,6,etc., then sensitivity would be 2)
b <- sensitivity/e # scale parameter
# Generate Laplace noise for each value in n
laplace_noise <- rlaplace(nrow(df_ods), location, b)
# Add the noise to the n column
sds <- df_ods
sds$value <- sds$value + laplace_noise
sds <- sds %>%
mutate(type = "synthetic",
dp = e)
df_frequency_sds <- rbind(df_frequency_sds,sds)
}
# histogram for original data
ods <- df_ods
ods$dp = e
df_frequency_ods <- rbind(df_frequency_ods,ods)
}
# Compare histogram ----
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_dp_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
# scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_frequency_ods, aes(x = combine, y = value, fill = type), stat = "identity") +
geom_boxplot(data = df_frequency_sds, aes(x = combine, y = value, fill = type), alpha = .2) +
facet_wrap(~dp) +
scale_y_continuous(limits = c(-10,100), breaks = seq(-10,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_dp_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(rpart.plot)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
graphs = "graphs/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
# Load original data ----
ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph numeric tree (disclosive) ----
# generate synthetic data
sds <- syn(ods, m = 1, seed = my.seed,models = TRUE)
model_numeric <- sds$models$var4
rpart.plot(model_numeric, type = 1,roundint = FALSE)
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_numeric.pdf"), height = 4, width = 10)
# Generate the plot
rpart.plot(model_numeric, type = 1)
# Close the PDF device
dev.off()
# Graph categorical tree (protective) ----
# generate synthetic data
sds <- syn(ods, m = 1, seed = my.seed,minnumlevels = 5,models = TRUE)
model_categorical <- sds$models$var4
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_categorical.pdf"), height = 4, width = 10)
# Generate the plot
rpart.plot(model_categorical, type = 1,roundint = FALSE)
# Close the PDF device
dev.off()
# Graph combined plots ----
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_combined.pdf"), height = 4, width = 10)
# Set up the plotting area to have 1 row and 2 columns
par(mfrow = c(1, 2))
# Plot the first tree
rpart.plot(model_numeric, type = 1,main = "Numeric (disclosive)",roundint = FALSE)
# Plot the second tree
rpart.plot(model_categorical, type = 1,main = "Categorical (protective)",roundint = FALSE)
par(mfrow = c(1, 1))
# Close the PDF device
dev.off()
# Load necessary library
library(dplyr)
# Set seed for reproducibility
set.seed(123)
# Simulate data
data <- data.frame(
Name = sample(c("John", "Jane", "Alice", "Bob", "Charlie", "Diana", "Eve", "Frank"), 100, replace = TRUE),
Age = sample(20:60, 100, replace = TRUE),
Gender = sample(c("Male", "Female"), 100, replace = TRUE),
City = sample(c("New York", "Los Angeles", "Chicago", "Houston", "Phoenix"), 100, replace = TRUE),
Occupation = sample(c("Engineer", "Doctor", "Teacher", "Lawyer", "Artist"), 100, replace = TRUE)
)
# View the first few rows of the dataset
head(data)
# Identify unique observations
unique_data <- data %>%
distinct(Name, Age, Gender, City, Occupation)
# Count the number of unique observations
nrow(unique_data)
# Number of original observations
total_observations <- nrow(data)
# Number of unique observations
unique_observations <- nrow(unique_data)
# Display the results
cat("Total Observations:", total_observations, "\n")
cat("Unique Observations:", unique_observations, "\n")
cat("Duplicates Removed:", total_observations - unique_observations, "\n")
# View the unique data
head(unique_data)
