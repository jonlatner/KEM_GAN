model1 <- lm(wages ~ age + gender + education)
summary(model1)
# Step 2: Extract residuals from the OLS model
residuals_model1 <- resid(model1)
# Step 3: Fit a second model (Model 2) where the squared residuals are regressed on the same variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Calculate heteroskedasticity-consistent (robust) standard errors for Model 2
robust_se_model2 <- sqrt(diag(vcovHC(model2, type = "HC1")))
# Step 5: Use texreg to compare Model 1 and Model 2
# In texreg, you can manually input the robust standard errors for Model 2
screenreg(list(model1, model2),
override.se = list(coef(summary(model1))[, "Std. Error"], robust_se_model2),
override.pvalues = list(coef(summary(model1))[, "Pr(>|t|)"],
2 * pt(abs(coef(model2) / robust_se_model2), df = model2$df.residual, lower.tail = FALSE)),
custom.model.names = c("Model 1: Wages", "Model 2: Squared Residuals"))
# Load required packages
if (!require("texreg")) {
install.packages("texreg")
}
if (!require("lmtest")) {
install.packages("lmtest")
}
if (!require("sandwich")) {
install.packages("sandwich")
}
library(texreg)
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
# Create a categorical variable for education with 3 levels
education_cont <- rnorm(n, mean = 16, sd = 2)  # original continuous education variable
education <- cut(education_cont,
breaks = c(-Inf, 12, 16, Inf),
labels = c("Low", "Medium", "High"))
education <- factor(education, levels = c("Low", "Medium", "High"))
# Simulate contract type (0 = Temporary, 1 = Permanent)
# Higher age, male gender, and higher education should increase the probability of having a permanent contract
logit_p <- -1 + 0.05 * age + 0.7 * gender + ifelse(education == "Low", 0, ifelse(education == "Medium", 1, 2))
prob_permanent <- exp(logit_p) / (1 + exp(logit_p))
contract_type <- rbinom(n, 1, prob_permanent)  # 1 for permanent, 0 for temporary
# Step 1: Fit a logistic regression model (Model 1)
model1 <- glm(contract_type ~ age + gender + education, family = binomial)
summary(model1)
# Step 2: Extract residuals from the logistic model
# For logistic regression, we use Pearson residuals to check variance
residuals_model1 <- residuals(model1, type = "pearson")
# Step 3: Fit a second model where the squared residuals are regressed on the same variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Calculate heteroskedasticity-consistent (robust) standard errors for Model 2
robust_se_model2 <- sqrt(diag(vcovHC(model2, type = "HC1")))
# Step 5: Use texreg to compare Model 1 and Model 2
# We use robust standard errors for Model 2
screenreg(list(model1, model2),
override.se = list(coef(summary(model1))[, "Std. Error"], robust_se_model2),
override.pvalues = list(coef(summary(model1))[, "Pr(>|z|)"],
2 * pt(abs(coef(model2) / robust_se_model2), df = model2$df.residual, lower.tail = FALSE)),
custom.model.names = c("Model 1: Logistic Regression (Permanent Contract)",
"Model 2: Squared Residuals Regression"))
# Load required packages
if (!require("texreg")) {
install.packages("texreg")
}
if (!require("lmtest")) {
install.packages("lmtest")
}
if (!require("sandwich")) {
install.packages("sandwich")
}
library(texreg)
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
# Create a categorical variable for education with 3 levels
education_cont <- rnorm(n, mean = 16, sd = 2)  # original continuous education variable
education <- cut(education_cont,
breaks = c(-Inf, 12, 16, Inf),
labels = c("Low", "Medium", "High"))
education <- factor(education, levels = c("Low", "Medium", "High"))
# Simulate contract type (0 = Temporary, 1 = Permanent)
# Higher age, male gender, and higher education should increase the probability of having a permanent contract
logit_p <- -1 + 0.05 * age + 0.7 * gender + ifelse(education == "Low", 0, ifelse(education == "Medium", 1, 2))
prob_permanent <- exp(logit_p) / (1 + exp(logit_p))
contract_type <- rbinom(n, 1, prob_permanent)  # 1 for permanent, 0 for temporary
# Step 1: Fit a logistic regression model (Model 1)
model1 <- glm(contract_type ~ age + gender + education, family = binomial)
summary(model1)
# Step 2: Extract residuals from the logistic model
# For logistic regression, we use Pearson residuals to check variance
residuals_model1 <- residuals(model1, type = "pearson")
# Step 3: Fit a second model where the squared residuals are regressed on the same variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Calculate heteroskedasticity-consistent (robust) standard errors for Model 2
robust_se_model2 <- sqrt(diag(vcovHC(model2, type = "HC1")))
# Step 5: Use texreg to compare Model 1 and Model 2
# We use robust standard errors for Model 2
screenreg(list(model1, model2),
override.se = list(coef(summary(model1))[, "Std. Error"], robust_se_model2),
override.pvalues = list(coef(summary(model1))[, "Pr(>|z|)"],
2 * pt(abs(coef(model2) / robust_se_model2), df = model2$df.residual, lower.tail = FALSE)),
custom.model.names = c("Model 1: Logistic Regression (Permanent Contract)",
"Model 2: Squared Residuals Regression"))
reticulate::repl_python()
reticulate::repl_python()
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
df_frequency <- data.frame()
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed)
sds <- sds$syn
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
graphs = "graphs/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
# Load original data ----
ods <- read.csv(paste0(original_data,"simulated.csv"))
# Create fake synthetic data ----
sds <- syn(ods, m = 1, seed = my.seed)
sds <- sds$syn
# Compare frequency ----
df_ods <- ods
df_sds <- sds
df_sds$type <- "synthetic"
df_ods$type <- "original"
df_combine <- rbind(df_sds,df_ods)
# Reshape the data for plotting
df_combine_long <- df_combine %>%
pivot_longer(!type, names_to = "variable", values_to = "value") %>%
mutate(value = as.factor(value)) %>%
group_by(type,variable,value) %>%
tally() %>%
group_by(type,variable) %>%
mutate(total = sum(n),
pct = n/total) %>%
ungroup()
df_combine_long
# Plot using facet_wrap
p <- ggplot(subset(df_combine_long,type == "original"), aes(x = value, y=n)) +
geom_bar(stat = 'identity',position = position_dodge(.9)) +
geom_text(aes(label = n),vjust = -0.5, size = 4,position = position_dodge(.9)) +
facet_wrap(~variable) +
theme_bw() +
scale_y_continuous(limits = c(0,700), breaks = seq(0,700,100)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
p
ggsave(p, filename = paste0(graphs,"graph_cart_frequency.pdf"), height = 4, width = 6, units = "in")
# Plot using facet_wrap
p <- ggplot(df_combine_long, aes(x = value, y=n, fill = type)) +
geom_bar(stat = 'identity',position = position_dodge(.9)) +
geom_text(aes(label = n),vjust = -0.5, size = 4,position = position_dodge(.9)) +
facet_wrap(~variable) +
theme_bw() +
scale_y_continuous(limits = c(0,700), breaks = seq(0,700,100)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
p
ggsave(p, filename = paste0(graphs,"graph_cart_frequency_compare.pdf"), height = 4, width = 6, units = "in")
# Compare histogram ----
df_ods_frequency <- ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_sds_frequency <- sds
df_sds_frequency$combine <- paste(df_sds_frequency$var1, df_sds_frequency$var2, df_sds_frequency$var3, df_sds_frequency$var4, sep = "")
df_sds_frequency <- df_sds_frequency %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(df_sds_frequency))
df_sds_frequency$pct <- (df_sds_frequency$Freq / nrow(df_sds)) * 100
df_sds_frequency$type <- "original"
df_sds_frequency$type <- "synthetic"
df_combine <- rbind(df_ods_frequency,df_sds_frequency)
# Plot using facet_wrap
p <- ggplot(subset(df_combine,type == "original"), aes(x = combine, y=Freq)) +
geom_bar(stat = 'identity',position = position_dodge(.9)) +
geom_text(aes(label = Freq),vjust = -0.5, size = 4,position = position_dodge(.9)) +
theme_bw() +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
p
ggsave(p, filename = paste0(graphs,"graph_cart_histogram.pdf"), height = 4, width = 6, units = "in")
# Plot using facet_wrap
p <- ggplot(df_combine, aes(x = combine, y=Freq, fill = type)) +
geom_bar(stat = 'identity',position = position_dodge(.9)) +
geom_text(aes(label = Freq),vjust = -0.5, size = 4,position = position_dodge(.9)) +
theme_bw() +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
p
ggsave(p, filename = paste0(graphs,"graph_cart_histogram_compare.pdf"), height = 4, width = 6, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
df_frequency <- data.frame()
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed)
sds <- sds$syn
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_cart_100.csv"), row.names = FALSE)
# Compare histogram ----
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_cart_100.csv"))
df_graph_sds <- df_frequency
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_histogram_compare_100.pdf"), height = 4, width = 10, units = "in")
ggsave(df_graph, filename = paste0(graphs,"graph_cart_histogram_compare_100_v2.pdf"), height = 6, width = 6, units = "in")
# Compare histogram ----
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_default.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_default.csv"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_default.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_default.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default_v2.pdf"), height = 5, width = 5)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_modified.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_modified.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_modified_v2.pdf"), height = 5, width = 5)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
df_frequency <- data.frame()
for (c in 1:100) {
# create seed
my.seed = my.seed + 1
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, cart.minbucket = 75)
sds <- sds$syn
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_cart_modified_100.csv"), row.names = FALSE)
# Compare histogram ----
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_cart_modified_100.csv"))
df_graph_sds <- df_frequency
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_modified_histogram_compare_100.pdf"), height = 4, width = 10, units = "in")
