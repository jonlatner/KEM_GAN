# Create simulated data ----
# Define the number of samples
n <- 1000
# Define the possible combinations of y
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define C-16 and c16
C_minus_16 <- combinations[1:15, ]
c16 <- combinations[16, ]
# Initialize an empty matrix to store the results
y <- matrix(0, nrow = n, ncol = 4)
# Generate the first n-1 samples from the multinomial distribution
for (i in 1:(n-1)) {
# Sample an index from 1 to 15 with equal probability
sampled_index <- sample(1:15, 1)
y[i, ] <- as.numeric(C_minus_16[sampled_index, ])
}
# Set the last sample to c16
y[n, ] <- as.numeric(c16)
# Convert the matrix to a data frame
y_df <- as.data.frame(y)
# Display the first few rows of the dataset
head(y_df)
# Display the last row to verify y1000 is c16
tail(y_df, 1)
View(y_df)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Define the number of samples
n <- 1000
# Define the possible combinations of y
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define C-16 and c16
C_minus_16 <- combinations[1:15, ]
c16 <- combinations[16, ]
# Initialize an empty matrix to store the results
y <- matrix(0, nrow = n, ncol = 4)
# Generate the first n-1 samples from the multinomial distribution
for (i in 1:(n-1)) {
# Sample an index from 1 to 15 with equal probability
sampled_index <- sample(1:15, 1)
y[i, ] <- as.numeric(C_minus_16[sampled_index, ])
}
# Set the last sample to c16
y[n, ] <- as.numeric(c16)
# Convert the matrix to a data frame
y_df <- as.data.frame(y)
colnames(y_df) <- c("var1", "var2", "var3", "var4")
# Display the first few rows of the dataset
head(y_df)
# Display the last row to verify y1000 is c16
tail(y_df, 1)
# Calculate the correlation matrix
cor_matrix <- cor(y_df)
# Print the correlation matrix
print(cor_matrix)
sampled_row
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Number of observations
n <- 1000
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define c_16 and C_−16
c_16 <- combinations[16,]
C_minus_16 <- combinations[-16,]
# Initialize the dataset
D <- data.frame(matrix(ncol = 4, nrow = n))
colnames(D) <- c("var1", "var2", "var3", "var4")
# Sample the first 999 observations from C_minus_16 with equal probability
for (i in 1:(n-1)) {
sampled_row <- sample(1:15, 1)
D[i,] <- C_minus_16[sampled_row,]
}
# Set the 1000th observation to c_16
D[1000,] <- c_16
# Convert to data frame and print the first few rows
df <- as.data.frame(D)
head(df)
# Save
write.csv(df, paste0(original_data,"simulated.csv"), row.names = FALSE)
sampled_row
sample
D
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Number of observations
n <- 1000
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define c_16 and C_−16
c_16 <- combinations[16,]
C_minus_16 <- combinations[-16,]
# Initialize the dataset
D <- data.frame(matrix(ncol = 4, nrow = n))
colnames(D) <- c("var1", "var2", "var3", "var4")
D
c_16
C_minus_16
# Load the synthpop package
library(synthpop)
# Check the documentation for the syn function
?syn
# Extract default values programmatically
default_values <- formals(syn)
print(default_values)
getAnywhere("syn")
# Load the synthpop and rpart packages
library(synthpop)
library(rpart)
# Check the documentation for the syn function in synthpop
?syn
# Inspect the source code of the syn function
getAnywhere("syn")
# Extract the default parameters of the rpart function
default_rpart_params <- formals(rpart)
print(default_rpart_params)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Number of observations
n <- 1000
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define c_16 and C_−16
c_16 <- combinations[16,]
C_minus_16 <- combinations[-16,]
# Initialize the dataset
D <- data.frame(matrix(ncol = 4, nrow = n))
colnames(D) <- c("var1", "var2", "var3", "var4")
# Sample the first 999 observations from C_minus_16 with equal probability
for (i in 1:(n-1)) {
sampled_row <- sample(1:15, 1)
D[i,] <- C_minus_16[sampled_row,]
}
# Set the 1000th observation to c_16
D[1000,] <- c_16
# Convert to data frame and print the first few rows
df <- as.data.frame(D)
head(df)
# Save
write.csv(df, paste0(original_data,"simulated.csv"), row.names = FALSE)
sds <- syn(df_ods, m=1)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Number of observations
n <- 1000
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define c_16 and C_−16
c_16 <- combinations[16,]
C_minus_16 <- combinations[-16,]
# Initialize the dataset
D <- data.frame(matrix(ncol = 4, nrow = n))
colnames(D) <- c("var1", "var2", "var3", "var4")
# Sample the first 999 observations from C_minus_16 with equal probability
for (i in 1:(n-1)) {
sampled_row <- sample(1:15, 1)
D[i,] <- C_minus_16[sampled_row,]
}
# Set the 1000th observation to c_16
D[1000,] <- c_16
# Convert to data frame and print the first few rows
df <- as.data.frame(D)
head(df)
# Save
write.csv(df, paste0(original_data,"simulated.csv"), row.names = FALSE)
sds <- syn(df, m=1)
sds <- sds$syn
# Create a frequency table
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
frequency <- as.data.frame(table(sds))
ggplot(frequency, aes(x = combine, y = Freq)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Number of observations
n <- 1000
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define c_16 and C_−16
c_16 <- combinations[16,]
C_minus_16 <- combinations[-16,]
# Initialize the dataset
D <- data.frame(matrix(ncol = 4, nrow = n))
colnames(D) <- c("var1", "var2", "var3", "var4")
# Sample the first 999 observations from C_minus_16 with equal probability
for (i in 1:(n-1)) {
sampled_row <- sample(1:15, 1)
D[i,] <- C_minus_16[sampled_row,]
}
# Set the 1000th observation to c_16
D[1000,] <- c_16
# Convert to data frame and print the first few rows
df <- as.data.frame(D)
head(df)
# Save
write.csv(df, paste0(original_data,"simulated.csv"), row.names = FALSE)
sds <- syn(df, m=1)
sds <- sds$syn
# Create a frequency table
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
frequency <- as.data.frame(table(sds))
ggplot(frequency, aes(x = combine, y = Freq)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
sds <- syn(df, m=1)
sds <- sds$syn
# Create a frequency table
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
frequency <- as.data.frame(table(sds))
ggplot(frequency, aes(x = combine, y = Freq)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Create simulated data ----
# Number of observations
n <- 1000
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Define c_16 and C_−16
c_16 <- combinations[16,]
C_minus_16 <- combinations[-16,]
# Initialize the dataset
D <- data.frame(matrix(ncol = 4, nrow = n))
colnames(D) <- c("var1", "var2", "var3", "var4")
# Sample the first 999 observations from C_minus_16 with equal probability
for (i in 1:(n-1)) {
sampled_row <- sample(1:15, 1)
D[i,] <- C_minus_16[sampled_row,]
}
# Set the 1000th observation to c_16
D[1000,] <- c_16
# Convert to data frame and print the first few rows
df <- as.data.frame(D)
head(df)
# Save
write.csv(df, paste0(original_data,"simulated.csv"), row.names = FALSE)
sds <- syn(df, m=1)
sds <- sds$syn
# Create a frequency table
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
frequency <- as.data.frame(table(sds))
ggplot(frequency, aes(x = combine, y = Freq)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
sds <- syn(df, m=1)
sds <- sds$syn
# Create a frequency table
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
frequency <- as.data.frame(table(sds))
ggplot(frequency, aes(x = combine, y = Freq)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency by variable ----
# Reshape the data for plotting
df_ods_long <- df_ods %>%
pivot_longer(cols = starts_with("var"), names_to = "variable", values_to = "value") %>%
mutate(value = as.factor(value)) %>%
group_by(variable,value) %>%
tally() %>%
group_by(variable) %>%
mutate(total = sum(n),
pct = n/total) %>%
ungroup()
df_ods_long
# Plot using facet_wrap
ggplot(df_ods_long, aes(x = value, y=n)) +
geom_bar(color = "black", stat = 'identity') +
geom_text(aes(label = n),vjust = -0.5, size = 4) +
facet_wrap(~variable, scales = "free") +
theme_bw() +
scale_y_continuous(limits = c(0,700), breaks = seq(0,700,100)) +
theme(panel.grid.minor = element_blank(),
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
# Graph frequency by id ----
df_frequency <- df_ods
df_frequency$combine <- paste(df_frequency$var1, df_frequency$var2, df_frequency$var3, df_frequency$var4, sep = "")
df_frequency <- df_frequency %>%
select(-matches("var"))
df_frequency <- as.data.frame(table(df_frequency))
df_frequency
as.vector(df_frequency$combine)
