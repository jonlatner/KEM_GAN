from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
library(tidyverse)
options(scipen=999)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
library(readxl)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"))
df
View(df)
reticulate::repl_python()
library("synthpop")
ods <- SD2011[, c("sex", "income", "age", "edu" , "socprof", "trust", "height", "weight", "smoke", "region")]
syn_para <- syn(ods, method = "parametric", cont.na = list(income = -8),
seed = 34567, print.flag = FALSE)
syn_cart <- syn(ods, method = "cart", cont.na = list(income = -8),
seed = 34567, print.flag = FALSE)
u_ods_para <- utility.gen(syn_para, ods, method = "cart",
resamp.method = "none", print.flag = FALSE)
u_ods_cart <- utility.gen(syn_cart, ods, method = "cart",
resamp.method = "none", print.flag = FALSE)
cat("\nParametric pMSE ", u_ods_para$pMSE,
"\nCART pMSE ", u_ods_cart$pMSE,
"\nUtility ratio parametric to CART: ", u_ods_para$pMSE/u_ods_cart$pMSE)
u_3way <- utility.tables(syn_para, ods, tab.stats = "all",
+ tables = "threeway")
u_3way <- utility.tables(syn_para, ods, tab.stats = "all",
tables = "threeway")
cors <- cor(u_3way$tabs)
cat("Correlations:\nVW with pMSE = ", cors["VW", "pMSE"],
", SPECKS with MabsDD = ", cors["SPECKS", "MabsDD"],
", and SPECKS with PO50 = ", cors["SPECKS", "MabsDD"], "." , sep = "")
toplot <- u_3way$tabs[, c(1:4, 6, 5, 7)]
dimnames(toplot)[[2]][c(1, 4)] <- c("VW\npMSE", "SPECKS\nMabsDD\nPO50")
pairs(toplot)
cors
library("synthpop")
my.seed = 12345
ods <- SD2011[, c("sex", "income", "age", "edu" , "socprof", "trust", "height", "weight", "smoke", "region")]
syn <- syn(ods, cont.na = list(income = -8), seed = my.seed)
utility <- utility.gen(syn, ods)
library("synthpop")
my.seed = 12345
ods <- SD2011[, c("sex", "income", "age", "edu" , "socprof", "trust", "height", "weight", "smoke", "region")]
syn <- syn(ods, cont.na = list(income = -8), seed = my.seed)
utility <- utility.gen(syn, ods, nperms = 5)
u_3way <- utility.tables(syn, ods, tab.stats = "all", tables = "threeway")
cors <- cor(u_3way$tabs)
cors
cat("Correlations:\nVW with pMSE = ", cors["VW", "pMSE"],
", SPECKS with MabsDD = ", cors["SPECKS", "MabsDD"],
", and SPECKS with PO50 = ", cors["SPECKS", "MabsDD"], "." , sep = "")
toplot <- u_3way$tabs[, c(1:4, 6, 5, 7)]
dimnames(toplot)[[2]][c(1, 4)] <- c("VW\npMSE", "SPECKS\nMabsDD\nPO50")
pairs(toplot)
u_3way
u_3way
u_3way
u_3way$tables
u_3way$utility.plot
u_3way
table(ods$region)
library(synthpop)
library(corrplot)
my.seed = 12345
ods <- SD2011[, c("sex", "income", "age", "edu" , "socprof", "trust", "height", "weight", "smoke", "region")]
syn <- syn(ods, cont.na = list(income = -8), seed = my.seed)
utility <- utility.gen(syn, ods, nperms = 5)
corrplot(ods, method="number")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
setwd(main_dir)
# Create fake synthetic data ----
# rows = c(50000) # Rows/observations
# cols = c(10) # Columns/variables
# copies = c(5)
# for (r in rows) {
#   for (c in cols) {
#     for (m in copies) {
#       df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,".csv"))
#       df_synds <- syn(df_ods, m = m, seed = 1234)
#       saveRDS(df_synds, paste0(data_files,"synthetic/synds_",m,".rds"))
#     }
#   }
# }
# Load original data ----
# Dimensions
rows = c(50000) # Rows/observations
cols = c(10) # Columns/variables
for (r in rows) {
for (c in cols) {
df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,".csv"))
}
}
# Load synthetic data ----
df_sds <- data.frame()
epochs = c(10,40,75,100)
batch = c(500, 1000)
df_sds <- data.frame()
for (r in rows) {
for (c in cols) {
for (e in epochs) {
for (b in batch) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_rows_",r,"_cols_",c,"_n_1_epochs_",e,"_batch_",b,".csv"))
sds$epochs = e
sds$batch = b
df_sds <- rbind(df_sds, sds)
}
}
}
}
# convert continuous variables to bins
continuous_vars <- sapply(df_sds, function(x) is.numeric(x))
continuous_var_names <- names(df_sds[continuous_vars])
continuous_var_names <- setdiff(continuous_var_names, c("epochs", "batch"))
df_sds_binned <- df_sds
for (col_name in continuous_var_names) {
bins <- seq(min(df_sds_binned[[col_name]]), max(df_sds_binned[[col_name]]), length.out = 21) # 21 points to get 20 bins
labels <- round(bins[-length(bins)],0)  # Remove the last element of breaks
df_sds_binned[[col_name]] <- cut(df_sds_binned[[col_name]], breaks = bins, labels = labels)
}
head(df_sds_binned)
df_sds_long <- df_sds_binned %>%
pivot_longer(cols = !c(epochs,batch), names_to = "variables", values_to = "value") %>%
arrange(epochs, batch, variables, value) %>%
group_by(epochs, batch, variables, value) %>%
tally() %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(pct = n/total,
epochs = as.factor(epochs))
# reorder variable/value names
df_sds_long$value <- factor(df_sds_long$value, levels=sort(as.numeric(as.character(unique(df_sds_long$value)))))
df_sds_long$variables <- reorder(df_sds_long$variables, as.numeric(gsub("var_", "", as.character(df_sds_long$variables))))
# Graph
df_graph <- ggplot(df_sds_long, aes(x = value, y = pct, color = epochs, group = epochs)) +
geom_line() +
facet_grid(batch ~ variables, scales = "free", labeller = labeller(.cols = label_both)) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
setwd(main_dir)
# Create fake synthetic data ----
# rows = c(50000) # Rows/observations
# cols = c(10) # Columns/variables
# copies = c(5)
# for (r in rows) {
#   for (c in cols) {
#     for (m in copies) {
#       df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,".csv"))
#       df_synds <- syn(df_ods, m = m, seed = 1234)
#       saveRDS(df_synds, paste0(data_files,"synthetic/synds_",m,".rds"))
#     }
#   }
# }
# Load original data ----
# Dimensions
rows = c(50000) # Rows/observations
cols = c(10) # Columns/variables
for (r in rows) {
for (c in cols) {
df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,".csv"))
}
}
# Load synthetic data ----
df_sds <- data.frame()
epochs = c(50)
batch = c(1000)
df_sds <- data.frame()
for (r in rows) {
for (c in cols) {
for (e in epochs) {
for (b in batch) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_rows_",r,"_cols_",c,"_n_1_epochs_",e,"_batch_",b,".csv"))
sds$epochs = e
sds$batch = b
df_sds <- rbind(df_sds, sds)
}
}
}
}
# convert continuous variables to bins
continuous_vars <- sapply(df_sds, function(x) is.numeric(x))
continuous_var_names <- names(df_sds[continuous_vars])
continuous_var_names <- setdiff(continuous_var_names, c("epochs", "batch"))
df_sds_binned <- df_sds
for (col_name in continuous_var_names) {
bins <- seq(min(df_sds_binned[[col_name]]), max(df_sds_binned[[col_name]]), length.out = 21) # 21 points to get 20 bins
labels <- round(bins[-length(bins)],0)  # Remove the last element of breaks
df_sds_binned[[col_name]] <- cut(df_sds_binned[[col_name]], breaks = bins, labels = labels)
}
head(df_sds_binned)
df_sds_long <- df_sds_binned %>%
pivot_longer(cols = !c(epochs,batch), names_to = "variables", values_to = "value") %>%
arrange(epochs, batch, variables, value) %>%
group_by(epochs, batch, variables, value) %>%
tally() %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(pct = n/total,
epochs = as.factor(epochs))
# reorder variable/value names
df_sds_long$value <- factor(df_sds_long$value, levels=sort(as.numeric(as.character(unique(df_sds_long$value)))))
df_sds_long$variables <- reorder(df_sds_long$variables, as.numeric(gsub("var_", "", as.character(df_sds_long$variables))))
# Graph
df_graph <- ggplot(df_sds_long, aes(x = value, y = pct, color = epochs, group = epochs)) +
geom_line() +
facet_grid(batch ~ variables, scales = "free", labeller = labeller(.cols = label_both)) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Combine data ----
df_combine <- df_ods
df_combine$epochs <- "Original"
df_combine$batch <- "Original"
df_combine <- rbind(df_combine,df_sds) %>%
pivot_longer(cols = !c(epochs,batch), names_to = "variables", values_to = "value")
df_combine$variables <- with(df_combine, reorder(variables, as.numeric(gsub("var_", "", as.character(variables)))))
df_combine$variables <- factor(df_combine$variables)
# Convert to character, then to factor with ordered levels
df_combine$epochs <- as.character(df_combine$epochs)
df_combine$epochs <- factor(df_combine$epochs, levels = c("Original", sort(setdiff(as.numeric(df_combine$epochs), NA), decreasing = FALSE)))
df_graph <- ggplot(df_combine, aes(x = value, color = epochs, group = epochs)) +
geom_density(data = subset(df_combine, epochs!="Original"), linewidth=.5)  +
geom_histogram(data = subset(df_combine, epochs=="Original"), aes(y=after_stat(density)), color = "blue", alpha=0.1, position="identity", linewidth = .25)+
facet_wrap( ~ variables, scales = "free", labeller = labeller(.cols = label_both), nrow = 2) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
setwd(main_dir)
# Create fake synthetic data ----
# rows = c(50000) # Rows/observations
# cols = c(10) # Columns/variables
# copies = c(5)
# for (r in rows) {
#   for (c in cols) {
#     for (m in copies) {
#       df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,".csv"))
#       df_synds <- syn(df_ods, m = m, seed = 1234)
#       saveRDS(df_synds, paste0(data_files,"synthetic/synds_",m,".rds"))
#     }
#   }
# }
# Load original data ----
# Dimensions
rows = c(50000) # Rows/observations
cols = c(20) # Columns/variables
for (r in rows) {
for (c in cols) {
df_ods <- read.csv(paste0(original_data,"ods_rows_",r,"_cols_",c,".csv"))
}
}
# Load synthetic data ----
df_sds <- data.frame()
epochs = c(50)
batch = c(1000)
df_sds <- data.frame()
for (r in rows) {
for (c in cols) {
for (e in epochs) {
for (b in batch) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_rows_",r,"_cols_",c,"_n_1_epochs_",e,"_batch_",b,".csv"))
sds$epochs = e
sds$batch = b
df_sds <- rbind(df_sds, sds)
}
}
}
}
# convert continuous variables to bins
continuous_vars <- sapply(df_sds, function(x) is.numeric(x))
continuous_var_names <- names(df_sds[continuous_vars])
continuous_var_names <- setdiff(continuous_var_names, c("epochs", "batch"))
df_sds_binned <- df_sds
for (col_name in continuous_var_names) {
bins <- seq(min(df_sds_binned[[col_name]]), max(df_sds_binned[[col_name]]), length.out = 21) # 21 points to get 20 bins
labels <- round(bins[-length(bins)],0)  # Remove the last element of breaks
df_sds_binned[[col_name]] <- cut(df_sds_binned[[col_name]], breaks = bins, labels = labels)
}
head(df_sds_binned)
df_sds_long <- df_sds_binned %>%
pivot_longer(cols = !c(epochs,batch), names_to = "variables", values_to = "value") %>%
arrange(epochs, batch, variables, value) %>%
group_by(epochs, batch, variables, value) %>%
tally() %>%
mutate(total = sum(n)) %>%
ungroup() %>%
mutate(pct = n/total,
epochs = as.factor(epochs))
# reorder variable/value names
df_sds_long$value <- factor(df_sds_long$value, levels=sort(as.numeric(as.character(unique(df_sds_long$value)))))
df_sds_long$variables <- reorder(df_sds_long$variables, as.numeric(gsub("var_", "", as.character(df_sds_long$variables))))
# Graph
df_graph <- ggplot(df_sds_long, aes(x = value, y = pct, color = epochs, group = epochs)) +
geom_line() +
facet_grid(batch ~ variables, scales = "free", labeller = labeller(.cols = label_both)) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Combine data ----
df_combine <- df_ods
df_combine$epochs <- "Original"
df_combine$batch <- "Original"
df_combine <- rbind(df_combine,df_sds) %>%
pivot_longer(cols = !c(epochs,batch), names_to = "variables", values_to = "value")
df_combine$variables <- with(df_combine, reorder(variables, as.numeric(gsub("var_", "", as.character(variables)))))
df_combine$variables <- factor(df_combine$variables)
# Convert to character, then to factor with ordered levels
df_combine$epochs <- as.character(df_combine$epochs)
df_combine$epochs <- factor(df_combine$epochs, levels = c("Original", sort(setdiff(as.numeric(df_combine$epochs), NA), decreasing = FALSE)))
df_graph <- ggplot(df_combine, aes(x = value, color = epochs, group = epochs)) +
geom_density(data = subset(df_combine, epochs!="Original"), linewidth=.5)  +
geom_histogram(data = subset(df_combine, epochs=="Original"), aes(y=after_stat(density)), color = "blue", alpha=0.1, position="identity", linewidth = .25)+
facet_wrap( ~ variables, scales = "free", labeller = labeller(.cols = label_both), nrow = 2) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_combine, aes(x = value, color = epochs, group = epochs)) +
geom_density(data = subset(df_combine, epochs!="Original"), linewidth=.5)  +
geom_histogram(data = subset(df_combine, epochs=="Original"), aes(y=after_stat(density)), color = "blue", alpha=0.1, position="identity", linewidth = .25)+
facet_wrap( ~ variables, scales = "free", labeller = labeller(.cols = label_both), nrow = 5) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_combine, aes(x = value, color = epochs, group = epochs)) +
geom_density(data = subset(df_combine, epochs!="Original"), linewidth=.5)  +
geom_histogram(data = subset(df_combine, epochs=="Original"), aes(y=after_stat(density)), color = "blue", alpha=0.1, position="identity", linewidth = .25)+
facet_wrap( ~ variables, scales = "free", labeller = labeller(.cols = label_both), ncol = 5) +
xlab("") +
ylab("") +
theme_bw() +
guides(colour = guide_legend(nrow = 1)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
