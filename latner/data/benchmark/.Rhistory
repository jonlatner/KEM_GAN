# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
# SuperFastPython.com
# execute tasks sequentially in a for loop
# https://superfastpython.com/multiprocessing-for-loop/
# SuperFastPython.com
# execute tasks in parallel in a for loop
from time import sleep
from random import random
from multiprocessing import Process
import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
library(tidyverse)
options(scipen=999)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
library(readxl)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"))
df
View(df)
reticulate::repl_python()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("brms")
install.packages("brms",dependencies = TRUE)
install.packages("rstan",dependencies = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# Detach if loaded
if ("bayesintro" %in% (.packages())) {
detach(package:bayesintro, unload = TRUE)
}
# Uninstall if installed
if ("bayesintro" %in% installed.packages()) {
remove.packages("bayesintro")
}
# Install if not installed
if (!("devtools" %in% installed.packages())) {
install.packages("devtools")
}
# Load from GitHub
library(devtools)
devtools::install_github("denis-cohen/bayesintro")
# Load to library
library(bayesintro)
learnr::run_tutorial("00-00-int", package = "bayesintro")
learnr::run_tutorial("01-01-lec", package = "bayesintro")
# Load to library
library(bayesintro)
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
library(bayesintro)
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
library(synthpop)
ods <- SD2011
ods
str(ods)
vars <- c("sex", "age", "edu", "marital", "income", "ls", "wkabint")
ods <- SD2011[, vars]
str(ods)
str(ods)
ods <- SD2011
summary(ods)
exp(.1)
update
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load duration data from CTGAN (based on optimized parameterization) ----
data <- c("adult","grid","gridr","sd2011_small","sd2011")
data <- c("sd2011_small","sd2011")
data <- c("sd2011_small")
type <- c("ctgan")
df_duration <- data.frame()
for (d in data) {
for (t in type) {
output <- read.csv(paste0(duration,"duration_",t,"_data_",d,".csv")) %>%
filter(epochs == 50 & copies == 1 & j == 1) %>%
select(type, data, duration)
df_duration <- rbind(df_duration,output)
}
}
# Load duration data from datasynthesizer ----
type <- c("datasynthesizer")
for (d in data) {
for (t in type) {
correlated <- read.csv(paste0(duration,"duration_",t,"_correlated_data_",d,".csv"))
independent <- read.csv(paste0(duration,"duration_",t,"_independent_data_",d,".csv"))
output <- rbind(correlated, independent) %>%
filter(parents == 1 & epsilon == 0 & copies == 1 & j == 1) %>%
select(type, data, duration)
df_duration <- rbind(df_duration,output)
}
}
# Load duration data from synthpop ----
type <- c("synthpop")
for (d in data) {
for (t in type) {
output <- read.csv(paste0(duration,"duration_",t,"_data_",d,".csv"))
df_duration <- rbind(df_duration,output)
}
}
df_duration
# Graph data ----
df_graph <- ggplot(df_duration, aes(x = type, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ data, scales = "free", labeller = labeller(.cols = label_both), nrow = 1) +
xlab("Synthesizer") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(plot = df_graph, paste0(graphs,"graph_compare_duration.pdf"), height = 4, width = 8)
df_duration
7.6/.2
3.5/.2
