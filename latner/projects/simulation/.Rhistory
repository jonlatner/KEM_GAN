noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
library(LaplacesDemon)
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(VGAM)
library(LaplacesDemon)
# create data ----
df_green <- data.frame(
color = rep("green", 1000)
)
df_blue <- data.frame(
color = rep("blue", 1001)
)
df_ods <- rbind(df_green,df_blue)
rm(df_green,df_blue)
# graph data ----
df_graph <- df_ods %>%
group_by(color) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = color, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Differential privacy parameters
epsilon <- 1
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), m=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
df_sds <- add_laplace_noise(df_ods, scale)
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
binary_data <- c(green_eyes, blue_eyes)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), m=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
binary_data <- c(green_eyes, blue_eyes)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), m=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
binary_data <- c(green_eyes, blue_eyes)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Display the noisy data
head(noisy_binary_data)
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(VGAM)
library(LaplacesDemon)
# create data ----
df_green <- data.frame(
color = rep("green", 1000)
)
df_blue <- data.frame(
color = rep("blue", 1001)
)
df_ods <- rbind(df_green,df_blue)
rm(df_green,df_blue)
# graph data ----
df_graph <- df_ods %>%
group_by(color) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = color, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Differential privacy parameters
epsilon <- 1
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
df_sds <- add_laplace_noise(df_ods, scale)
# Install necessary package if not already installed
if (!require("LaplacesDemon")) {
install.packages("LaplacesDemon")
library(LaplacesDemon)
}
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
binary_data <- c(green_eyes, blue_eyes)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location = 0, scale = scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Display the noisy data
head(noisy_binary_data)
binary_data
binary_data <- data.frame(c(green_eyes, blue_eyes))
View(binary_data)
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(VGAM)
library(LaplacesDemon)
# create data ----
df_green <- data.frame(
color = rep("green", 1000)
)
df_blue <- data.frame(
color = rep("blue", 1001)
)
df_ods <- rbind(df_green,df_blue)
rm(df_green,df_blue)
# graph data ----
df_graph <- df_ods %>%
group_by(color) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = color, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Differential privacy parameters
epsilon <- 1
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
df_sds <- add_laplace_noise(df_ods, scale)
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(VGAM)
library(LaplacesDemon)
# create data ----
df_green_y <- data.frame(
green = rep(1, 1000)
)
df_green_n <- data.frame(
green = rep(0, 1001)
)
df_ods <- rbind(df_green_y,df_green_n)
rm(df_green_y,df_green_n)
# graph data ----
df_graph <- df_ods %>%
group_by(color) %>%
tally() %>%
ungroup()
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(VGAM)
library(LaplacesDemon)
# create data ----
df_green_y <- data.frame(
green = rep(1, 1000)
)
df_green_n <- data.frame(
green = rep(0, 1001)
)
df_ods <- rbind(df_green_y,df_green_n)
rm(df_green_y,df_green_n)
# graph data ----
df_graph <- df_ods %>%
group_by(green) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = green, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Differential privacy parameters
epsilon <- 1
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
df_sds <- add_laplace_noise(df_ods, scale)
table(df_sds$green)
View(df_sds)
# Install necessary package if not already installed
if (!require("LaplacesDemon")) {
install.packages("LaplacesDemon")
library(LaplacesDemon)
}
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location = 0, scale = scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Install necessary package if not already installed
if (!require("LaplacesDemon")) {
install.packages("LaplacesDemon")
library(LaplacesDemon)
}
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
binary_data <- c(green_eyes, blue_eyes)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location = 0, scale = scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Display the noisy data
head(noisy_binary_data)
binary_data
table(noisy_binary_data)
table(noisy_binary_data)
unique(noisy_binary_data)
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Display the noisy data
head(noisy_binary_data)
# Install necessary package if not already installed
if (!require("LaplacesDemon")) {
install.packages("LaplacesDemon")
library(LaplacesDemon)
}
# Create your binary variable
set.seed(123) # for reproducibility
green_eyes <- rep(0, 1000)
blue_eyes <- rep(1, 1001)
binary_data <- c(green_eyes, blue_eyes)
# Differential privacy parameters
epsilon <- 1 # You can adjust this value
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location = 0, scale = scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
noisy_binary_data <- add_laplace_noise(binary_data, scale)
# Display the noisy data
head(noisy_binary_data)
noise
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
df_sds <- add_laplace_noise(df_ods, scale)
head(df_sds)
table(df_sds)
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(VGAM)
library(LaplacesDemon)
# create data ----
df_green_y <- data.frame(
green = rep(1, 1000)
)
df_green_n <- data.frame(
green = rep(0, 1001)
)
df_ods <- rbind(df_green_y,df_green_n)
rm(df_green_y,df_green_n)
# graph data ----
df_graph <- df_ods %>%
group_by(green) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = green, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Differential privacy parameters
epsilon <- 2
# Laplace noise generation
sensitivity <- 1 # Sensitivity for binary data (count query)
scale <- sensitivity / epsilon
# Function to add Laplace noise
add_laplace_noise <- function(data, scale) {
noise <- rlaplace(length(data), location=0, s=scale)
noisy_data <- data + noise
return(noisy_data)
}
# Apply the function to add noise
df_sds <- add_laplace_noise(df_ods, scale)
table(df_sds)
# Load the necessary package
library(LaplacesDemon)
# Define the counts
green_eyes_count <- 1000
blue_eyes_count <- 1001
# Define sensitivity and epsilon
sensitivity <- 1  # Sensitivity for counting queries is 1
epsilon <- 0.5    # You can adjust epsilon according to your privacy needs
# Calculate the scale parameter for the Laplace distribution
b <- sensitivity / epsilon
# Generate Laplace noise for both counts
laplace_noise_green <- rlaplace(1, m = 0, s = b)
# Load the necessary package
library(LaplacesDemon)
# Define the counts
green_eyes_count <- 1000
blue_eyes_count <- 1001
# Define sensitivity and epsilon
sensitivity <- 1  # Sensitivity for counting queries is 1
epsilon <- 0.5    # You can adjust epsilon according to your privacy needs
# Calculate the scale parameter for the Laplace distribution
b <- sensitivity / epsilon
# Generate Laplace noise for both counts
laplace_noise_green <- rlaplace(1, location = 0, s = b)
laplace_noise_blue <- rlaplace(1, location = 0, s = b)
# Add the noise to the counts
noisy_green_eyes_count <- round(green_eyes_count + laplace_noise_green)
noisy_blue_eyes_count <- round(blue_eyes_count + laplace_noise_blue)
# Print the results
cat("Noisy count of green eyes:", noisy_green_eyes_count, "\n")
cat("Noisy count of blue eyes:", noisy_blue_eyes_count, "\n")
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(LaplacesDemon)
# create data ----
df_green_y <- data.frame(
green = rep(1, 1000)
)
df_green_n <- data.frame(
green = rep(0, 1001)
)
df_ods <- rbind(df_green_y,df_green_n)
rm(df_green_y,df_green_n)
# graph data ----
df_graph <- df_ods %>%
group_by(green) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = green, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Define sensitivity and epsilon
sensitivity <- 1  # Sensitivity for counting queries is 1
epsilon <- 0.5    # You can adjust epsilon according to your privacy needs
# Calculate the scale parameter for the Laplace distribution
b <- sensitivity / epsilon
# Generate Laplace noise for both counts
laplace_noise_green_n <- rlaplace(1, location = 0, s = b)
laplace_noise_green_y <- rlaplace(1, location = 0, s = b)
laplace_noise_green_n
laplace_noise_green_y
# top commands ----
rm(list=ls(all=TRUE))
set.seed(123)
# library
library(tidyverse)
library(LaplacesDemon)
# create data ----
df_green_y <- data.frame(
green = rep(1, 1000)
)
df_green_n <- data.frame(
green = rep(0, 1001)
)
# generate original data
df_ods <- rbind(df_green_y,df_green_n)
rm(df_green_y,df_green_n)
# graph data ----
df_graph <- df_ods %>%
group_by(green) %>%
tally() %>%
ungroup()
ggplot(df_graph, aes(x = green, y = n)) +
geom_bar(position = 'dodge', stat='identity') +
geom_text(aes(label=n), position=position_dodge(width=0.9), vjust=-0.5) +
theme_minimal()
# add noise ----
# Define sensitivity and epsilon
sensitivity <- 1  # Sensitivity for counting queries is 1
epsilon <- 0.5    # You can adjust epsilon according to your privacy needs
# Calculate the scale parameter for the Laplace distribution
b <- sensitivity / epsilon
# Generate Laplace noise for both counts
laplace_noise_green_n <- rlaplace(1, location = 0, s = b)
laplace_noise_green_y <- rlaplace(1, location = 0, s = b)
laplace_noise_green_n
laplace_noise_green_y
# Add the noise to the counts
df_green_y <- data.frame(
green = rep(1, 1000 + round(laplace_noise_green_y))
)
df_green_n <- data.frame(
green = rep(0, 1001 + round(laplace_noise_green_n))
)
# generate synthetic data
df_sds <- rbind(df_green_y,df_green_n)
rm(df_green_y,df_green_n)
