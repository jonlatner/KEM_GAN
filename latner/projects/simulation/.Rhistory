# location of two output files
description_file = os.path.join(synthetic_data, description)
# Number of tuples generated in synthetic dataset.
num_tuples_to_generate = len(df_ods.index)
'''
Step 3 DataDescriber
'''
# 3a. Instantiate a DataDescriber.
describer = DataDescriber(category_threshold=threshold_value)
# 3b. Compute the statistics of the dataset.
describer.describe_dataset_in_correlated_attribute_mode(dataset_file=input_data,
k=p,
epsilon=e,
seed=my_seed)
# 3c. Save dataset description to a file on local machine.
describer.save_dataset_description_to_file(description_file)
'''
Step 4 generate synthetic dataset
'''
# 4a. Instantiate a DataGenerator.
generator = DataGenerator()
# 4b. Generate a synthetic dataset.
generator.generate_dataset_in_correlated_attribute_mode(num_tuples_to_generate, description_file)
# 4c. Save it to local machine.
# Create a unique filename based on the values
filename_sds = f"sds_datasynthesizer_{d}_k_{p}_e_{e}_m_{m}_n_{j}.csv"
# Construct the full file path using os.path.join()
full_path_sds = os.path.join(synthetic_data, filename_sds)
# generator.save_synthetic_data(full_path_sds)
print("")
print("data:",d)
print("parents:",p)
print("epsilon:",e)
print("copes:",m)
print("number:",j)
'''
TOP COMMANDS
'''
# load libraries
import os
import pandas as pd
import numpy as np
import random
import time
from DataSynthesizer.DataDescriber import DataDescriber
from DataSynthesizer.DataGenerator import DataGenerator
# file paths - adapt main_dir pathway
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/datasynthesizer/"
os.chdir(main_dir)
# beginning commands
pd.set_option('display.width', 1000)
pd.set_option('display.float_format', '{:.2f}'.format)
# Set the random seed
my_seed = 1234
'''
LOAD DATA
'''
data = ["simulated"] # Real data
copies = [10]
parents = [2]
epsilon = [0,0.1,0.25,0.5,0.75,1,10]
copies = [1]
parents = [2]
epsilon = [0]
df_frequency = pd.DataFrame()
df_roc_values = pd.DataFrame()
for d in data:
for m in copies:
for p in parents:
for e in epsilon:
for j in range(m):
j = j + 1
my_seed = my_seed + 1
np.random.seed(my_seed)
random.seed(my_seed)
# Create a unique filename based on the values
filename_ods = f"{d}.csv"
description = 'description.json'
filename_path = os.path.join(original_data, filename_ods)
df_ods = pd.read_csv(filename_path, index_col=False)
# input dataset
input_data = filename_path
# An attribute is categorical if its domain size is less than this threshold.
# Here modify the threshold to adapt to the domain size of "education" (which is 14 in input dataset).
threshold_value = 30
# location of two output files
description_file = os.path.join(synthetic_data, description)
# Number of tuples generated in synthetic dataset.
num_tuples_to_generate = len(df_ods.index)
'''
Step 3 DataDescriber
'''
# 3a. Instantiate a DataDescriber.
describer = DataDescriber(category_threshold=threshold_value)
# 3b. Compute the statistics of the dataset.
describer.describe_dataset_in_correlated_attribute_mode(dataset_file=input_data,
k=p,
epsilon=e,
seed=my_seed)
# 3c. Save dataset description to a file on local machine.
describer.save_dataset_description_to_file(description_file)
'''
Step 4 generate synthetic dataset
'''
# 4a. Instantiate a DataGenerator.
generator = DataGenerator()
# 4b. Generate a synthetic dataset.
generator.generate_dataset_in_correlated_attribute_mode(num_tuples_to_generate, description_file)
# 4c. Save it to local machine.
# Create a unique filename based on the values
filename_sds = f"sds_datasynthesizer.csv"
# Construct the full file path using os.path.join()
full_path_sds = os.path.join(synthetic_data, filename_sds)
# generator.save_synthetic_data(full_path_sds)
print("parents:",p)
print("epsilon:",e)
print("copes:",m)
print("number:",j)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_wrap(~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_grid(parents~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
View(df_graph_sds)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1)
View(df_graph_sds)
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1) %>%
arrange(combine)
head(df_graph_sds)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1) %>%
arrange(combine)
head(df_graph_sds)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1) %>%
arrange(combine)
head(df_graph_sds)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1) %>%
arrange(combine)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_grid(parents~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1) %>%
filter(parents == 4)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_wrap(~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
