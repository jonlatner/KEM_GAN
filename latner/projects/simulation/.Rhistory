library(tidyverse)
library(car)
#functions
options(scipen=999)
# Load data ----
df_ods <- SD2011[, c("sex","age","edu","depress")]
table(df_ods$depress)
# original ----
s5 <- syn(df_ods, seed = 8564, m = 1, print.flag = FALSE)
t5 <- disclosure( s5, df_ods, keys = c("sex","age","edu"), target = "depress", print.flag = FALSE)
# modified ----
s6 <- s5
s6$syn$depress <- recode(s6$syn$depress, "1:hi=1")
t6 <- disclosure( s6, df_ods, keys = c("sex","age","edu"), target = "depress", print.flag = FALSE)
# risk measure ----
print(t5, to.print = c("attrib"))
print(t6, to.print = c("attrib"))
# df_ods$q <- paste(df_ods$sex, df_ods$age, df_ods$edu, sep = "_")
df_syn <- s6$syn
View(df_syn)
print(t6)
print(t6, to.print = c("all"))
unique(df_syn)
replicate(df_syn)
duplicated(df_syn)
df_syn$duplicated <- duplicated(df_syn)
table(df_syn$duplicated)
View(df_syn)
df_syn <- df_syn %>%
sort(duplicated,sex,edu,age)
df_syn <- df_syn %>%
arrange(duplicated,sex,edu,age)
View(df_syn)
print(t6, to.print = c("attrib"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(car)
#functions
options(scipen=999)
# Load data ----
df_ods <- SD2011[, c("sex","age","edu","depress")]
table(df_ods$depress)
# original ----
s5 <- syn(df_ods, seed = 8564, m = 1, print.flag = FALSE)
t5 <- disclosure( s5, df_ods, keys = c("sex","age","edu"), target = "depress", print.flag = FALSE)
# modified ----
s6 <- s5
s6$syn$depress <- recode(s6$syn$depress, "1:hi=1")
t6 <- disclosure( s6, df_ods, keys = c("sex","age","edu"), target = "depress", print.flag = FALSE)
df_syn <- s6$syn
# risk measure ----
print(t5, to.print = c("attrib"))
print(t6, to.print = c("attrib"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(car)
#functions
options(scipen=999)
# Load data ----
df_ods <- SD2011[, c("sex","age","region","placesize","depress")]
table(df_ods$depress)
table(df_ods$depress, useNA = "ifany")
1093/5000
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(car)
#functions
options(scipen=999)
# Load data ----
df_ods <- SD2011[, c("sex","age","region","placesize","depress")]
s5 <- syn(df_ods, seed = 8564, m = 5, print.flag = FALSE)
t5 <- disclosure( s5, df_ods, keys = c("sex","age","region","placesize"), target = "depress", print.flag = FALSE)
print(t5, to.print = c("ident"), plot = FALSE)
t5 <- disclosure.summary( s5, df_ods, keys = c("sex","age","region","placesize"), target = "depress", print.flag = FALSE)
t5
print(t5, to.print = c("ident"), plot = FALSE)
t5 <- disclosure( s5, df_ods, keys = c("sex","age","region","placesize"), target = "depress", print.flag = FALSE)
t5
print(t5, to.print = c("ident"), plot = FALSE)
t5
t5 <- disclosure.summary( s5, df_ods, keys = c("sex","age","region","placesize"), target = "depress", print.flag = FALSE)
t5
replicated.uniques( s5, df_ods)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Convert all variables to factors
df_ods <- data.frame(lapply(df_ods, as.factor))
# Loop ----
df_frequency <- data.frame()
for (c in 1:10) {
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, method = "cart")
sds <- sds$syn
# create seed
my.seed = my.seed + 1
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_ctree_10.csv"), row.names = FALSE)
# Compare histogram ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_ctree_10.csv"))
df_graph_sds <- df_frequency
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop (CART - factor) ----
df_frequency <- data.frame()
for (c in 1:10) {
# Create fake synthetic data
df_ods_factor <- data.frame(lapply(df_ods, as.factor))
sds <- syn(df_ods_factor, m = 1, seed = my.seed, method = "cart")
sds <- sds$syn
# create seed
my.seed = my.seed + 1
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency_cart_factor <- df_frequency
df_frequency_cart_factor$type <- "CART (factor)"
# Loop (CTREE) ----
df_frequency <- data.frame()
for (c in 1:10) {
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, method = "ctree")
sds <- sds$syn
# create seed
my.seed = my.seed + 1
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
df_frequency_ctree <- df_frequency
df_frequency_ctree$type <- "CTREE"
# Compare histogram ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- rbind(df_frequency_ctree,df_frequency_cart_factor)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_wrap(~type) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(df_graph, filename = paste0(graphs,"graph_ctree_histogram_compare_10.pdf"), height = 4, width = 10, units = "in")
# ggsave(df_graph, filename = paste0(graphs,"graph_ctree_histogram_compare_10_v2.pdf"), height = 6, width = 6, units = "in")
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
# facet_wrap(~type) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type)) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .8) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .5) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .5) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
scale_fill_manual(values = c("black", "gray50", "gray90")) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .5) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
# scale_fill_manual(values = c("black", "gray50", "gray90")) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_ctree_cart_factor_histogram_compare_10.pdf"), height = 4, width = 10, units = "in")
ggsave(df_graph, filename = paste0(graphs,"graph_ctree_cart_factor_histogram_compare_10_v2.pdf"), height = 6, width = 6, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(rpart.plot)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
graphs = "graphs/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
# Load original data ----
ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph numeric tree (disclosive) ----
# generate synthetic data
sds <- syn(ods, m = 1, seed = my.seed,models = TRUE)
model_numeric <- sds$models$var4
rpart.plot(model_numeric, type = 1,roundint = FALSE)
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_numeric.pdf"), height = 6, width = 6)
# Generate the plot
rpart.plot(model_numeric, type = 1)
# Close the PDF device
dev.off()
# Graph categorical tree (protective) ----
# generate synthetic data
sds <- syn(ods, m = 1, seed = my.seed,minnumlevels = 5,models = TRUE)
model_categorical <- sds$models$var4
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_categorical.pdf"), height = 6, width = 6)
# Generate the plot
rpart.plot(model_categorical, type = 1,roundint = FALSE)
# Close the PDF device
dev.off()
# Graph combined plots ----
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_combined.pdf"), height = 4, width = 10)
# Set up the plotting area to have 1 row and 2 columns
par(mfrow = c(1, 2))
# Plot the first tree
rpart.plot(model_numeric, type = 1,main = "Numeric (disclosive)",roundint = FALSE)
# Plot the second tree
rpart.plot(model_categorical, type = 1,main = "Categorical (protective)",roundint = FALSE)
par(mfrow = c(1, 1))
# Close the PDF device
dev.off()
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(rpart.plot)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
graphs = "graphs/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# load original data ----
# Load original data ----
ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph numeric tree (disclosive) ----
# generate synthetic data
sds <- syn(ods, m = 1, seed = my.seed,models = TRUE)
model_numeric <- sds$models$var4
rpart.plot(model_numeric, type = 1,roundint = FALSE)
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_numeric.pdf"), height = 6, width = 6)
# Generate the plot
rpart.plot(model_numeric, type = 1)
# Close the PDF device
dev.off()
# Graph categorical tree (protective) ----
# generate synthetic data
sds <- syn(ods, m = 1, seed = my.seed,minnumlevels = 5,models = TRUE)
model_categorical <- sds$models$var4
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_categorical.pdf"), height = 6, width = 6)
# Generate the plot
rpart.plot(model_categorical, type = 1,roundint = FALSE)
# Close the PDF device
dev.off()
# Graph combined plots ----
# Define the PDF file and open the device
pdf(paste0(graphs,"graph_tree_combined.pdf"), height = 4, width = 10)
# Set up the plotting area to have 1 row and 2 columns
par(mfrow = c(1, 2))
# Plot the first tree
rpart.plot(model_numeric, type = 1,main = "CTREE/CART",roundint = FALSE)
# Plot the second tree
rpart.plot(model_categorical, type = 1,main = "CART (factor)",roundint = FALSE)
par(mfrow = c(1, 1))
# Close the PDF device
dev.off()
