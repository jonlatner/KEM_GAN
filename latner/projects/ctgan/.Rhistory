utility_plot <- data.frame(utility$utility.plot$data)
utility_plot$copies <- c
utility_plot$epochs <- e
utility_plot$data <- d
df_fidelity_plot <- rbind(df_fidelity_plot,utility_plot)
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 0)
output <- data.frame(data = d,
copies = c,
epochs = as.character(e),
pmse = as.numeric(mean(utility_measure$pMSE)))
df_comparison <- rbind(df_comparison,output)
}
}
}
df_comparison <- df_comparison %>%
arrange(data,copies,epochs)
write.csv(df_comparison, paste0(tables,"ctgan_fidelity_optimize_dataset.csv"), row.names=FALSE)
write.csv(df_fidelity_plot, paste0(tables,"ctgan_fidelity_twoway_dataset.csv"), row.names=FALSE)
# Graph ----
df_comparison <- read.csv(paste0(tables,"ctgan_fidelity_optimize_dataset.csv"))
df_comparison$epochs <- factor(as.character(df_comparison$epochs), levels = str_sort(unique(df_comparison$epochs), numeric = TRUE))
df_comparison <- df_comparison %>%
filter(copies == 5) %>%
filter(data == "sd2011_clean_small") %>%
pivot_longer(!c(data,copies,epochs), names_to = "utility", values_to = "values")
df_graph <- ggplot(df_comparison, aes(x = epochs, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ utility, labeller = labeller(.rows = label_both)) +
ylab("pMSE") +
theme_bw() +
ylim(0,1.25) +
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_dataset.pdf"), height = 4, width = 6)
# Graph (two-way) ----
df_plot <- read.csv(paste0(tables,"ctgan_fidelity_twoway_dataset.csv"))
data <- c("sd2011","sd2011_clean","sd2011_clean_small","sd2011_clean_small_categorical")
data <- c("sd2011_clean_small")
for (d in data) {
df_plot_graph <- df_plot %>%
filter(data == d & epochs == 600) %>%
filter(copies == 5)
df_graph <- ggplot(df_plot_graph, aes(x = X2, y = X1, fill = val)) +
geom_tile() +
scale_fill_gradient(low = "gray95", high = "red") +
xlab("") +
ylab("") +
theme_minimal() +
theme(axis.text.x = element_text(size = 10, angle = 90, hjust = 0.9, vjust = 0.2),
axis.text.y = element_text(size = 10, margin = margin(r = 0)),
title = element_text(size = 11),
legend.title = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_twoway_",d,".pdf"), height = 4, width = 6)
}
df_graph
df_comparison <- read.csv(paste0(tables,"ctgan_fidelity_optimize_dataset.csv"))
df_comparison$epochs <- factor(as.character(df_comparison$epochs), levels = str_sort(unique(df_comparison$epochs), numeric = TRUE))
df_comparison <- df_comparison %>%
filter(copies == 5) %>%
filter(data == "sd2011_clean_small") %>%
pivot_longer(!c(data,copies,epochs), names_to = "utility", values_to = "values")
df_graph <- ggplot(df_comparison, aes(x = epochs, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ utility, labeller = labeller(.rows = label_both)) +
ylab("pMSE") +
theme_bw() +
ylim(0,1.25) +
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_comparison, aes(x = epochs, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
ylab("pMSE") +
theme_bw() +
ylim(0,1.25) +
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_dataset.pdf"), height = 4, width = 6)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/ctgan/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/ctgan/"
tables = "tables/ctgan/"
setwd(main_dir)
# Load original data ----
data <- c("sd2011_clean_small")
copies = c(1)
df_fidelity <- data.frame()
epochs = c(150)
batch_size = c(250)
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in epochs) {
for (mb in batch_size) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_batch_size_",mb,"_epochs_",e,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
# sds_list$syn[[j]] <- sds  # use when m>1
sds_list$syn <- sds # use when m==1
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 0)
output <- data.frame(data = d,
copies = c,
epochs = as.character(e),
batch = as.character(mb),
pmse = as.numeric(mean(utility_measure$pMSE)))
df_fidelity <- rbind(df_fidelity,output)
}
}
}
}
epochs = c(300)
batch_size = c(500)
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in epochs) {
for (mb in batch_size) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_batch_size_",mb,"_epochs_",e,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
# sds_list$syn[[j]] <- sds  # use when m>1
sds_list$syn <- sds # use when m==1
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 0)
output <- data.frame(data = d,
copies = c,
epochs = as.character(e),
batch = as.character(mb),
pmse = as.numeric(mean(utility_measure$pMSE)))
df_fidelity <- rbind(df_fidelity,output)
}
}
}
}
epochs = c(600)
batch_size = c(1000)
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in epochs) {
for (mb in batch_size) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_batch_size_",mb,"_epochs_",e,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
# sds_list$syn[[j]] <- sds  # use when m>1
sds_list$syn <- sds # use when m==1
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 0)
output <- data.frame(data = d,
copies = c,
epochs = as.character(e),
batch = as.character(mb),
pmse = as.numeric(mean(utility_measure$pMSE)))
df_fidelity <- rbind(df_fidelity,output)
}
}
}
}
write.csv(df_fidelity, paste0(tables,"ctgan_fidelity_batch_size.csv"), row.names=FALSE)
# Graph ----
df_fidelity <- read.csv(paste0(tables,"ctgan_fidelity_batch_size.csv"))
df_fidelity$epochs <- factor(as.character(df_fidelity$epochs), levels = str_sort(unique(df_fidelity$epochs), numeric = TRUE))
df_fidelity$batch <- factor(as.character(df_fidelity$batch), levels = str_sort(unique(df_fidelity$batch), numeric = TRUE))
df_fidelity_long <- df_fidelity %>%
pivot_longer(!c(data,copies,epochs,batch), names_to = "utility", values_to = "values")
df_graph <- ggplot(df_fidelity_long, aes(x = batch, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
ylab("pMSE") +
theme_bw() +
ylim(0,1.25) +
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_batch_size.pdf"), height = 4, width = 6)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/ctgan/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/ctgan/"
tables = "tables/ctgan/"
setwd(main_dir)
# Load original data ----
epochs = c(1,100,300,600,900)
batch_size = c(500)
data <- c("sd2011_clean_small")
copies = c(1)
df_fidelity <- data.frame()
for (c in copies) {
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in epochs) {
for (mb in batch_size) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",d,"_epochs_",e,"_batch_size_",mb,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
# sds_list$syn[[j]] <- sds  # use when m>1
sds_list$syn <- sds # use when m==1
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 0)
output <- data.frame(data = d,
copies = c,
epochs = as.character(e),
pmse = as.numeric(mean(utility_measure$pMSE)))
df_fidelity <- rbind(df_fidelity,output)
}
}
}
}
write.csv(df_fidelity, paste0(tables,"ctgan_fidelity_epochs.csv"), row.names=FALSE)
# Graph ----
df_fidelity <- read.csv(paste0(tables,"ctgan_fidelity_epochs.csv"))
df_fidelity$epochs <- factor(as.character(df_fidelity$epochs), levels = str_sort(unique(df_fidelity$epochs), numeric = TRUE))
df_fidelity_long <- df_fidelity %>%
pivot_longer(!c(data,copies,epochs), names_to = "utility", values_to = "values")
df_graph <- ggplot(df_fidelity_long, aes(x = epochs, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
ylab("pMSE") +
theme_bw() +
ylim(0,1.25) +
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_epochs.pdf"), height = 4, width = 6)
df_fidelity <- read.csv(paste0(tables,"ctgan_fidelity_batch_size.csv"))
df_fidelity$epochs <- factor(as.character(df_fidelity$epochs), levels = str_sort(unique(df_fidelity$epochs), numeric = TRUE))
df_fidelity$batch <- factor(as.character(df_fidelity$batch), levels = str_sort(unique(df_fidelity$batch), numeric = TRUE))
df_fidelity_long <- df_fidelity %>%
pivot_longer(!c(data,copies,epochs,batch), names_to = "utility", values_to = "values")
df_graph <- ggplot(df_fidelity_long, aes(x = batch, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
ylab("pMSE") +
theme_bw() +
ylim(0,1.25) +
geom_text(aes(label = round(values,2)), vjust = -.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_batch_size.pdf"), height = 4, width = 6)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/ctgan/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/ctgan/"
tables = "tables/ctgan/"
setwd(main_dir)
# Load original data ----
data <- c("sd2011_clean_small")
copies = c(1)
df_fidelity <- data.frame()
embedding = c(16,64,128)
diminsions_1_1 = c("[128]")
diminsions_1_2 = c("[128, 128]")
diminsions_1_3 = c("[128, 128, 128]")
diminsions_2_1 = c("[256]")
diminsions_2_2 = c("[256, 256]")
diminsions_2_3 = c("[256, 256, 256]")
diminsions_3_1 = c("[512]")
diminsions_3_2 = c("[512, 512]")
diminsions_3_3 = c("[512, 512, 512]")
dimensions = c(diminsions_1_1,diminsions_1_2,diminsions_1_3,
diminsions_2_1,diminsions_2_2,diminsions_2_3,
diminsions_3_1,diminsions_3_2,diminsions_3_3
)
for (c in copies) {
for (df in data) {
df_ods <- read.csv(paste0(original_data,df,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",df,"_m_",c,".rds"))
for (d in dimensions) {
for (e in embedding) {
sds <- read.csv(paste0(synthetic_data,"sds_ctgan_data_",df,"_embedding_",e,"_dimensions_",d,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
# sds_list$syn[[j]] <- sds  # use when m>1
sds_list$syn <- sds # use when m==1
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 0)
output <- data.frame(data = df,
copies = c,
embeddings = as.character(e),
dimensions = as.character(d),
pmse = as.numeric(mean(utility_measure$pMSE)))
df_fidelity <- rbind(df_fidelity,output)
}
}
}
}
write.csv(df_fidelity, paste0(tables,"ctgan_fidelity_dimensions.csv"), row.names=FALSE)
# Graph ----
df_fidelity <- read.csv(paste0(tables,"ctgan_fidelity_dimensions.csv"))
df_fidelity$embeddings <- factor(as.character(df_fidelity$embeddings), levels = str_sort(unique(df_fidelity$embeddings), numeric = TRUE))
df_fidelity_long <- df_fidelity %>%
pivot_longer(!c(data,copies,dimensions,embeddings), names_to = "utility", values_to = "values")
df_fidelity_long$dimensions = factor(as.factor(df_fidelity_long$dimensions),
levels = c("[128]","[256]","[512]",
"[128, 128]","[256, 256]","[512, 512]",
"[128, 128, 128]","[256, 256, 256]","[512, 512, 512]")
)
df_graph <- ggplot(df_fidelity_long, aes(x = values, y = dimensions)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
scale_y_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_dimensions.pdf"), height = 4, width = 6)
df_graph <- ggplot(df_fidelity_long, aes(x = values, y = dimensions)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
scale_y_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
ylab("pMSE") +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_dimensions.pdf"), height = 4, width = 6)
df_graph <- ggplot(df_fidelity_long, aes(x = values, y = dimensions)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
scale_y_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
xlab("pMSE") +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"ctgan_fidelity_optimize_dimensions.pdf"), height = 4, width = 6)
df_graph <- ggplot(df_fidelity_long, aes(x = dimensions, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
scale_x_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
ylab("pMSE") +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_fidelity_long, aes(x = dimensions, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
scale_y_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
ylab("pMSE") +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_fidelity_long, aes(x = dimensions, y = values)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
# scale_y_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
ylab("pMSE") +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_fidelity_long, aes(x = values, y = dimensions)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ embeddings, labeller = label_both) +
theme_bw() +
scale_y_discrete(limits = rev(levels(df_fidelity_long$dimensions))) +
xlim(0,1) +
xlab("pMSE") +
geom_text(aes(label = round(values,2)), hjust = -.5, size = 2.5) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
