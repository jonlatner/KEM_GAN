tmp_variables <- c("persnr", "syear",  "vp36")
tmp_dataset <- readRDS(file.path(path_in, "vp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "up31")
tmp_dataset <- readRDS(file.path(path_in, "up.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "wp29")
tmp_dataset <- readRDS(file.path(path_in, "wp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "hp36")
tmp_dataset <- readRDS(file.path(path_in, "hp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "kp48")
tmp_dataset <- readRDS(file.path(path_in, "kp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bcp32")
tmp_dataset <- readRDS(file.path(path_in, "bcp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "yp39")
tmp_dataset <- readRDS(file.path(path_in, "yp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "lp39")
tmp_dataset <- readRDS(file.path(path_in, "lp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "mp3701")
tmp_dataset <- readRDS(file.path(path_in, "mp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bhp_58")
tmp_dataset <- readRDS(file.path(path_in, "bhp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "np3101")
tmp_dataset <- readRDS(file.path(path_in, "np.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "tp60")
tmp_dataset <- readRDS(file.path(path_in, "tp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "xp40")
tmp_dataset <- readRDS(file.path(path_in, "xp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bbp32")
tmp_dataset <- readRDS(file.path(path_in, "bbp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "pp33")
tmp_dataset <- readRDS(file.path(path_in, "pp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "jp36")
tmp_dataset <- readRDS(file.path(path_in, "jp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "op3101")
tmp_dataset <- readRDS(file.path(path_in, "op.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bep36")
tmp_dataset <- readRDS(file.path(path_in, "bep.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bip_68")
tmp_dataset <- readRDS(file.path(path_in, "bip.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "ip36")
tmp_dataset <- readRDS(file.path(path_in, "ip.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "rp34")
tmp_dataset <- readRDS(file.path(path_in, "rp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "bfp59")
tmp_dataset <- readRDS(file.path(path_in, "bfp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "qp31")
tmp_dataset <- readRDS(file.path(path_in, "qp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "zp33")
tmp_dataset <- readRDS(file.path(path_in, "zp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "bdp47")
tmp_dataset <- readRDS(file.path(path_in, "bdp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
### DONE ###
save(data, file=file.path(path_out, "publicsector.rds"))
tmp_variables <- c("persnr", "syear", vars_public[[v]])
# List of file prefixes and corresponding variable names
vars_public <- list("sp34", "bap31", "bgp55", "vp36", "up31", "wp29", "hp36", "kp48", "bcp32", "yp39", "lp39", "mp3701", "bhp_58", "np3101", "tp60", "xp40", "bbp32", "pp33", "jp36", "op3101", "bep36", "bip_68", "ip36", "rp34", "bfp59", "qp31", "zp33", "bdp47")
# Loop through each file and variable pair
for (v in vars_public) {
tmp_variables <- c("persnr", "syear", vars_public[[v]])
tmp_dataset <- readRDS(file.path(path_in, paste0(file_prefix, ".rds")))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data, tmp_dataset)
}
# --------------------------------------------------------------------.
# This command file was generated by paneldata.org                    .
# --------------------------------------------------------------------.
# !!! I M P O R T A N T - W A R N I N G !!!                           .
# You alone are responsible for contents and appropriate.             .
# usage by accepting the usage agreement.                             .
# --------------------------------------------------------------------.
# Please report any errors of the code generated here                 .
# to soepmail@diw.de                                                  .
# --------------------------------------------------------------------.
# Top commands --------------------------------------------------------------
# https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
rm(list=ls(all=TRUE))
path_in = "OneDrive/SECCOPA/data/DE_SOEP/raw_data/R"
path_out = "OneDrive/ftc_trends_de/data_files/"
# READ DATA ----
# Initialize an empty data frame
data <- data.frame()
# List of file prefixes and corresponding variable names
files_and_vars <- list(
sp = "sp34", bap = "bap31", bgp = "bgp55", vp = "vp36", up = "up31",
wp = "wp29", hp = "hp36", kp = "kp48", bcp = "bcp32", yp = "yp39",
lp = "lp39", mp = "mp3701", bhp = "bhp_58", np = "np3101", tp = "tp60",
xp = "xp40", bbp = "bbp32", pp = "pp33", jp = "jp36", op = "op3101",
bep = "bep36", bip = "bip_68", ip = "ip36", rp = "rp34", bfp = "bfp59",
qp = "qp31", zp = "zp33", bdp = "bdp47"
)
# Loop through each file and variable pair
for (file_prefix in names(files_and_vars)) {
tmp_variables <- c("persnr", "syear", files_and_vars[[file_prefix]])
tmp_dataset <- readRDS(file.path(path_in, paste0(file_prefix, ".rds")))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data, tmp_dataset)
}
### Save ###
save(data, file=file.path(path_out, "publicsector.rds"))
sqrt(45/5)
sqrt(45/4)
# Load required packages
if (!require("lmtest")) {
install.packages("lmtest")
}
if (!require("sandwich")) {
install.packages("sandwich")
}
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
education <- rnorm(n, mean = 16, sd = 2)  # years of education
wages <- 20 + 0.5 * age + 2 * gender + 1.5 * education + rnorm(n, mean = 0, sd = 5)
# Step 1: Fit a basic OLS regression
model1 <- lm(wages ~ age + gender + education)
summary(model1)
# Step 2: Extract residuals from the OLS model
residuals_model1 <- resid(model1)
# Step 3: Fit a second model where the squared residuals are regressed on the same variables
# This models the conditional variance of wages as a function of the independent variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Use heteroskedasticity-consistent standard errors
coeftest(model2, vcov = vcovHC(model2, type = "HC1"))
# Summary of the second stage model
summary(model2)
# Summary of the second stage model
summary(model2)
summary(model1)
# Load required packages
if (!require("lmtest")) {
install.packages("lmtest")
}
if (!require("sandwich")) {
install.packages("sandwich")
}
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
# Create a categorical variable for education with 3 levels
education_cont <- rnorm(n, mean = 16, sd = 2)  # original continuous education variable
# Convert the continuous education into a categorical variable with 3 levels
education <- cut(education_cont,
breaks = c(-Inf, 12, 16, Inf),
labels = c("Low", "Medium", "High"))
# Make sure education is a factor
education <- factor(education, levels = c("Low", "Medium", "High"))
# Simulate wages based on age, gender, and education categories
wages <- 20 + 0.5 * age + 2 * gender + ifelse(education == "Low", 0, ifelse(education == "Medium", 3, 5)) + rnorm(n, mean = 0, sd = 5)
# Step 1: Fit a basic OLS regression
model1 <- lm(wages ~ age + gender + education)
summary(model1)
# Step 2: Extract residuals from the OLS model
residuals_model1 <- resid(model1)
# Step 3: Fit a second model where the squared residuals are regressed on the same variables
# This models the conditional variance of wages as a function of the independent variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Use heteroskedasticity-consistent standard errors
coeftest(model2, vcov = vcovHC(model2, type = "HC1"))
# Summary of the second stage model
summary(model2)
library(texreg)
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
# Create a categorical variable for education with 3 levels
education_cont <- rnorm(n, mean = 16, sd = 2)  # original continuous education variable
# Convert the continuous education into a categorical variable with 3 levels
education <- cut(education_cont,
breaks = c(-Inf, 12, 16, Inf),
labels = c("Low", "Medium", "High"))
# Make sure education is a factor
education <- factor(education, levels = c("Low", "Medium", "High"))
# Simulate wages based on age, gender, and education categories
wages <- 20 + 0.5 * age + 2 * gender + ifelse(education == "Low", 0, ifelse(education == "Medium", 3, 5)) + rnorm(n, mean = 0, sd = 5)
# Step 1: Fit a basic OLS regression (Model 1)
model1 <- lm(wages ~ age + gender + education)
summary(model1)
# Step 2: Extract residuals from the OLS model
residuals_model1 <- resid(model1)
# Step 3: Fit a second model (Model 2) where the squared residuals are regressed on the same variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Calculate heteroskedasticity-consistent (robust) standard errors for Model 2
robust_se_model2 <- sqrt(diag(vcovHC(model2, type = "HC1")))
# Step 5: Use texreg to compare Model 1 and Model 2
# In texreg, you can manually input the robust standard errors for Model 2
screenreg(list(model1, model2),
override.se = list(coef(summary(model1))[, "Std. Error"], robust_se_model2),
override.pvalues = list(coef(summary(model1))[, "Pr(>|t|)"],
2 * pt(abs(coef(model2) / robust_se_model2), df = model2$df.residual, lower.tail = FALSE)),
custom.model.names = c("Model 1: Wages", "Model 2: Squared Residuals"))
# Load required packages
if (!require("texreg")) {
install.packages("texreg")
}
if (!require("lmtest")) {
install.packages("lmtest")
}
if (!require("sandwich")) {
install.packages("sandwich")
}
library(texreg)
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
# Create a categorical variable for education with 3 levels
education_cont <- rnorm(n, mean = 16, sd = 2)  # original continuous education variable
education <- cut(education_cont,
breaks = c(-Inf, 12, 16, Inf),
labels = c("Low", "Medium", "High"))
education <- factor(education, levels = c("Low", "Medium", "High"))
# Simulate contract type (0 = Temporary, 1 = Permanent)
# Higher age, male gender, and higher education should increase the probability of having a permanent contract
logit_p <- -1 + 0.05 * age + 0.7 * gender + ifelse(education == "Low", 0, ifelse(education == "Medium", 1, 2))
prob_permanent <- exp(logit_p) / (1 + exp(logit_p))
contract_type <- rbinom(n, 1, prob_permanent)  # 1 for permanent, 0 for temporary
# Step 1: Fit a logistic regression model (Model 1)
model1 <- glm(contract_type ~ age + gender + education, family = binomial)
summary(model1)
# Step 2: Extract residuals from the logistic model
# For logistic regression, we use Pearson residuals to check variance
residuals_model1 <- residuals(model1, type = "pearson")
# Step 3: Fit a second model where the squared residuals are regressed on the same variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Calculate heteroskedasticity-consistent (robust) standard errors for Model 2
robust_se_model2 <- sqrt(diag(vcovHC(model2, type = "HC1")))
# Step 5: Use texreg to compare Model 1 and Model 2
# We use robust standard errors for Model 2
screenreg(list(model1, model2),
override.se = list(coef(summary(model1))[, "Std. Error"], robust_se_model2),
override.pvalues = list(coef(summary(model1))[, "Pr(>|z|)"],
2 * pt(abs(coef(model2) / robust_se_model2), df = model2$df.residual, lower.tail = FALSE)),
custom.model.names = c("Model 1: Logistic Regression (Permanent Contract)",
"Model 2: Squared Residuals Regression"))
# Load required packages
if (!require("texreg")) {
install.packages("texreg")
}
if (!require("lmtest")) {
install.packages("lmtest")
}
if (!require("sandwich")) {
install.packages("sandwich")
}
library(texreg)
library(lmtest)
library(sandwich)
# Simulate some data
set.seed(123)
n <- 1000
age <- rnorm(n, mean = 40, sd = 10)
gender <- sample(c(0, 1), n, replace = TRUE)  # 0 for female, 1 for male
# Create a categorical variable for education with 3 levels
education_cont <- rnorm(n, mean = 16, sd = 2)  # original continuous education variable
education <- cut(education_cont,
breaks = c(-Inf, 12, 16, Inf),
labels = c("Low", "Medium", "High"))
education <- factor(education, levels = c("Low", "Medium", "High"))
# Simulate contract type (0 = Temporary, 1 = Permanent)
# Higher age, male gender, and higher education should increase the probability of having a permanent contract
logit_p <- -1 + 0.05 * age + 0.7 * gender + ifelse(education == "Low", 0, ifelse(education == "Medium", 1, 2))
prob_permanent <- exp(logit_p) / (1 + exp(logit_p))
contract_type <- rbinom(n, 1, prob_permanent)  # 1 for permanent, 0 for temporary
# Step 1: Fit a logistic regression model (Model 1)
model1 <- glm(contract_type ~ age + gender + education, family = binomial)
summary(model1)
# Step 2: Extract residuals from the logistic model
# For logistic regression, we use Pearson residuals to check variance
residuals_model1 <- residuals(model1, type = "pearson")
# Step 3: Fit a second model where the squared residuals are regressed on the same variables
residuals_squared <- residuals_model1^2
model2 <- lm(residuals_squared ~ age + gender + education)
# Step 4: Calculate heteroskedasticity-consistent (robust) standard errors for Model 2
robust_se_model2 <- sqrt(diag(vcovHC(model2, type = "HC1")))
# Step 5: Use texreg to compare Model 1 and Model 2
# We use robust standard errors for Model 2
screenreg(list(model1, model2),
override.se = list(coef(summary(model1))[, "Std. Error"], robust_se_model2),
override.pvalues = list(coef(summary(model1))[, "Pr(>|z|)"],
2 * pt(abs(coef(model2) / robust_se_model2), df = model2$df.residual, lower.tail = FALSE)),
custom.model.names = c("Model 1: Logistic Regression (Permanent Contract)",
"Model 2: Squared Residuals Regression"))
reticulate::repl_python()
reticulate::repl_python()
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_default.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default_v2.pdf"), height = 5, width = 5)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_modified.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_modified.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_modified_v2.pdf"), height = 5, width = 5)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_default.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,25)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_default_v2.pdf"), height = 5, width = 5)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_attacker_modified.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~last_record, labeller = "label_both") +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,25)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_modified.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_modified_v2.pdf"), height = 5, width = 5)
