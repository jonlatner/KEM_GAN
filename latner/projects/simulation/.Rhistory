data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bep36")
tmp_dataset <- readRDS(file.path(path_in, "bep.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bip_68")
tmp_dataset <- readRDS(file.path(path_in, "bip.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "ip36")
tmp_dataset <- readRDS(file.path(path_in, "ip.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "rp34")
tmp_dataset <- readRDS(file.path(path_in, "rp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("bfp59", "persnr")
tmp_dataset <- readRDS(file.path(path_in, "bfp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
# --------------------------------------------------------------------.
# This command file was generated by paneldata.org                    .
# --------------------------------------------------------------------.
# !!! I M P O R T A N T - W A R N I N G !!!                           .
# You alone are responsible for contents and appropriate.             .
# usage by accepting the usage agreement.                             .
# --------------------------------------------------------------------.
# Please report any errors of the code generated here                 .
# to soepmail@diw.de                                                  .
# --------------------------------------------------------------------.
# Top commands --------------------------------------------------------------
# https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
rm(list=ls(all=TRUE))
### LOCAL VARIABLES ###
path_in = "OneDrive/SECCOPA/data/DE_SOEP/raw_data/R"
path_out = "OneDrive/ftc_trends_de/data_files/"
### READ DATA ###
data <- data.frame()
tmp_variables <- c("persnr", "syear",  "sp34")
tmp_dataset <- readRDS(file.path(path_in, "sp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bap31")
tmp_dataset <- readRDS(file.path(path_in, "bap.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bgp55")
tmp_dataset <- readRDS(file.path(path_in, "bgp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "vp36")
tmp_dataset <- readRDS(file.path(path_in, "vp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "up31")
tmp_dataset <- readRDS(file.path(path_in, "up.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "wp29")
tmp_dataset <- readRDS(file.path(path_in, "wp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "hp36")
tmp_dataset <- readRDS(file.path(path_in, "hp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "kp48")
tmp_dataset <- readRDS(file.path(path_in, "kp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bcp32")
tmp_dataset <- readRDS(file.path(path_in, "bcp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "yp39")
tmp_dataset <- readRDS(file.path(path_in, "yp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "lp39")
tmp_dataset <- readRDS(file.path(path_in, "lp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "mp3701")
tmp_dataset <- readRDS(file.path(path_in, "mp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bhp_58")
tmp_dataset <- readRDS(file.path(path_in, "bhp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "np3101")
tmp_dataset <- readRDS(file.path(path_in, "np.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "tp60")
tmp_dataset <- readRDS(file.path(path_in, "tp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "xp40")
tmp_dataset <- readRDS(file.path(path_in, "xp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bbp32")
tmp_dataset <- readRDS(file.path(path_in, "bbp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "pp33")
tmp_dataset <- readRDS(file.path(path_in, "pp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "jp36")
tmp_dataset <- readRDS(file.path(path_in, "jp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "op3101")
tmp_dataset <- readRDS(file.path(path_in, "op.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bep36")
tmp_dataset <- readRDS(file.path(path_in, "bep.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "bip_68")
tmp_dataset <- readRDS(file.path(path_in, "bip.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "ip36")
tmp_dataset <- readRDS(file.path(path_in, "ip.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "rp34")
tmp_dataset <- readRDS(file.path(path_in, "rp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "bfp59")
tmp_dataset <- readRDS(file.path(path_in, "bfp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "qp31")
tmp_dataset <- readRDS(file.path(path_in, "qp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear",  "zp33")
tmp_dataset <- readRDS(file.path(path_in, "zp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
tmp_variables <- c("persnr", "syear", "bdp47")
tmp_dataset <- readRDS(file.path(path_in, "bdp.rds"))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data,tmp_dataset)
### DONE ###
save(data, file=file.path(path_out, "publicsector.rds"))
tmp_variables <- c("persnr", "syear", vars_public[[v]])
# List of file prefixes and corresponding variable names
vars_public <- list("sp34", "bap31", "bgp55", "vp36", "up31", "wp29", "hp36", "kp48", "bcp32", "yp39", "lp39", "mp3701", "bhp_58", "np3101", "tp60", "xp40", "bbp32", "pp33", "jp36", "op3101", "bep36", "bip_68", "ip36", "rp34", "bfp59", "qp31", "zp33", "bdp47")
# Loop through each file and variable pair
for (v in vars_public) {
tmp_variables <- c("persnr", "syear", vars_public[[v]])
tmp_dataset <- readRDS(file.path(path_in, paste0(file_prefix, ".rds")))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data, tmp_dataset)
}
# --------------------------------------------------------------------.
# This command file was generated by paneldata.org                    .
# --------------------------------------------------------------------.
# !!! I M P O R T A N T - W A R N I N G !!!                           .
# You alone are responsible for contents and appropriate.             .
# usage by accepting the usage agreement.                             .
# --------------------------------------------------------------------.
# Please report any errors of the code generated here                 .
# to soepmail@diw.de                                                  .
# --------------------------------------------------------------------.
# Top commands --------------------------------------------------------------
# https://stackoverflow.com/questions/7505547/detach-all-packages-while-working-in-r
detachAllPackages <- function() {
basic.packages <- c("package:stats","package:graphics","package:grDevices","package:utils","package:datasets","package:methods","package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:",search()))==1,TRUE,FALSE)]
package.list <- setdiff(package.list,basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package, character.only=TRUE)
}
detachAllPackages()
rm(list=ls(all=TRUE))
path_in = "OneDrive/SECCOPA/data/DE_SOEP/raw_data/R"
path_out = "OneDrive/ftc_trends_de/data_files/"
# READ DATA ----
# Initialize an empty data frame
data <- data.frame()
# List of file prefixes and corresponding variable names
files_and_vars <- list(
sp = "sp34", bap = "bap31", bgp = "bgp55", vp = "vp36", up = "up31",
wp = "wp29", hp = "hp36", kp = "kp48", bcp = "bcp32", yp = "yp39",
lp = "lp39", mp = "mp3701", bhp = "bhp_58", np = "np3101", tp = "tp60",
xp = "xp40", bbp = "bbp32", pp = "pp33", jp = "jp36", op = "op3101",
bep = "bep36", bip = "bip_68", ip = "ip36", rp = "rp34", bfp = "bfp59",
qp = "qp31", zp = "zp33", bdp = "bdp47"
)
# Loop through each file and variable pair
for (file_prefix in names(files_and_vars)) {
tmp_variables <- c("persnr", "syear", files_and_vars[[file_prefix]])
tmp_dataset <- readRDS(file.path(path_in, paste0(file_prefix, ".rds")))
tmp_dataset <- tmp_dataset[ , tmp_variables]
names(tmp_dataset)[3] <- "public"
data <- rbind(data, tmp_dataset)
}
### Save ###
save(data, file=file.path(path_out, "publicsector.rds"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_frequency <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_graph_sds <- df_frequency
df_ods_frequency <- df_ods
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_datasynthesizer <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_datasynthesizer$type <- "datasynthesizer"
df_datasynthesizer
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_wrap(~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(dp<=1)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & <=1)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_wrap(~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100"), height = 4, width = 10, units = "in")
graphs = "graphs/"
ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100"), height = 4, width = 10, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Graph frequency ----
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_graph_ods <- df_ods_frequency
df_graph_sds <- read_csv(paste0(datasynthesizer_data,"datasynthesizer.csv"))
df_graph_sds$type <- "datasynthesizer"
df_graph_sds <- df_graph_sds %>%
filter(epsilon>0 & epsilon<=1)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
facet_wrap(~epsilon) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100"), height = 4, width = 10, units = "in")
ggsave(df_graph, filename = paste0(graphs,"graph_dp_datasynthesizer_compare_histogram_100.pdf"), height = 4, width = 10, units = "in")
