geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(data ~ variables, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_comparison <- rbind(df_ctgan, df_datasynthesizer, df_synthpop)
names(df_comparison) <- tolower(names(df_comparison))
table(df_comparison$type)
df_comparison_ods <- filter(df_comparison,data == "observed") %>%
select(-type)
df_comparison_ods <- filter(df_comparison,type == "observed") %>%
select(-type)
df_comparison_ods <- unique(df_comparison_ods)
df_comparison_ods$type = "observed"
df_comparison_sds <- filter(df_comparison,type != "observed")
df_comparison <- rbind(df_comparison_ods, df_comparison_sds)
df_comparison$type <- relevel(as.factor(df_comparison$type), ref = "observed")
df_graph <- ggplot(df_comparison, aes(x = value, y = pct, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(data ~ variables, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_comparison, aes(x = pct, y = value, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(data ~ variables, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_comparison, aes(x = pct, y = value, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(variables ~ data, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_comparison$value <- fct_relevel(df_comparison$value, "NA", after = Inf)
df_graph <- ggplot(df_comparison, aes(x = pct, y = value, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(variables ~ data, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_comparison$value <- fct_relevel(df_comparison$value, "NA", after = Inf)
df_graph <- ggplot(df_comparison, aes(x = pct, y = value, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(variables ~ data, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_comparison$value <- fct_rev(df_comparison$value)
df_comparison$value <- fct_relevel(df_comparison$value, "NA", after = Inf)
df_graph <- ggplot(df_comparison, aes(x = pct, y = value, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(variables ~ data, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_comparison <- rbind(df_ctgan, df_datasynthesizer, df_synthpop)
names(df_comparison) <- tolower(names(df_comparison))
table(df_comparison$type)
df_comparison_ods <- filter(df_comparison,type == "observed") %>%
select(-type)
df_comparison_ods <- unique(df_comparison_ods)
df_comparison_ods$type = "observed"
df_comparison_sds <- filter(df_comparison,type != "observed")
df_comparison <- rbind(df_comparison_ods, df_comparison_sds)
df_comparison$type <- relevel(as.factor(df_comparison$type), ref = "observed")
df_comparison$value <- fct_relevel(df_comparison$value, "NA", after = Inf)
df_comparison$value <- fct_rev(df_comparison$value)
df_graph <- ggplot(df_comparison, aes(x = pct, y = value, shape = type, color = type, group = type)) +
geom_point(data = subset(df_comparison, type!="observed"), position = position_dodge(width = .9), size = 2) +
geom_bar(data = subset(df_comparison, type=="observed"), stat = "identity", alpha = .2) +
facet_grid(variables ~ data, scales = "free") +
xlab("") +
ylab("") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
setwd(main_dir)
#functions
options(scipen=999)
# Create fake synthetic data ----
ods <- SD2011
write.csv(ods, paste0(original_data,"sd2011.csv"), row.names = FALSE)
summary(ods)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
duration = "duration/"
setwd(main_dir)
#functions
options(scipen=999)
# try something ----
df_ods <- read.csv(paste0(original_data,"sd2011_duration_w_missing.csv"))
df_synds <- syn(df_ods, m = 1)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
duration = "duration/"
setwd(main_dir)
#functions
options(scipen=999)
# try something ----
ods <- SD2011
ods <- select(ods,age,eduspec,sex,alcabuse)
summary(ods)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
duration = "duration/"
setwd(main_dir)
#functions
options(scipen=999)
# try something ----
ods <- SD2011
ods <- select(ods,age,eduspec,sex,alcabuse)
summary(ods)
rp_control <- rpart.control(na.action = "na.ignore")
library(rpart)
# Define synthesis settings using syn function
syn_settings <- syn(ods, verbose = TRUE)
rp_ctrl <- rpart.control(
minsplit = 2,          # Minimum number of observations to split a node
cp = 0.01,             # Complexity parameter for tree pruning
maxdepth = 5           # Maximum depth of the tree
)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(rpart)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
duration = "duration/"
setwd(main_dir)
#functions
options(scipen=999)
# try something ----
ods <- SD2011
ods <- select(ods,age,eduspec,sex,alcabuse)
summary(ods)
# Define synthesis settings using syn function
rp_ctrl <- rpart.control(
minsplit = 2,          # Minimum number of observations to split a node
cp = 0.01,             # Complexity parameter for tree pruning
maxdepth = 5           # Maximum depth of the tree
)
df_synds <- syn.cart(df_ods,
rp_control=rp_ctrl,
m = 1
)
df_synds <- syn.cart(ods,
rp_control=rp_ctrl,
m = 1
)
df_synds <- syn.cart(ods,
rpart.control=rp_ctrl,
m = 1
)
df_synds <- syn(ods,
control=rpart.control(cp = 0.01, minbucket = 5),
m = 1
)
df_synds <- syn(ods,
rpart.control(cp = 0.01, minbucket = 5),
m = 1
)
df_synds <- syn(ods,
cart.cp = 0.01,
m = 1
)
df_synds <- syn(ods,
cart.cp = 0.01,
cart.rpart = rpart(na.action = na.rpart),
m = 1
)
df_synds <- syn(ods,
cart.cp = 0.01,
cart.rpart = rpart(na.action = "na.rpart"),
m = 1
)
df_synds <- syn(ods,
cart.cp = 0.01,
cart.na_action = na.rpart,
m = 1
)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(xtable)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
setwd(main_dir)
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/"
graphs = "graphs/"
tables = "tables/"
#functions
options(scipen=999)
# Load and optimize ctgan utility data ----
df_ctgan <- read.csv(paste0(tables,"ctgan/utility_output.csv"))
df_ctgan <- df_ctgan %>%
group_by(data,copies) %>%
mutate(best_fit = ifelse(specks==min(specks),yes=1,no=0)) %>%
filter(best_fit == 1) %>%
ungroup() %>%
mutate(synthesizer = "ctgan") %>%
select(-epochs,-best_fit)
df_ctgan
# Load utility data from other synthesizers ----
type <- c("synthpop", "datasynthesizer")
df_utility <- data.frame()
for (t in type) {
output <- read.csv(paste0(tables,t,"/utility_output.csv"))
output$synthesizer <- t
df_utility <- rbind(df_utility,output)
}
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(xtable)
library(synthpop)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
setwd(main_dir)
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/datasynthesizer/"
graphs = "graphs/datasynthesizer/"
tables = "tables/datasynthesizer/"
#functions
options(scipen=999)
# Load utility from datasynthesizer data ----
parents = c(0,1,2)
privacy = c(0,.1,1)
data <- c("adult","grid","gridr","sd2011_small","sd2011")
data <- c("sd2011_duration_wo_missing","sd2011_duration_w_missing")
# 1 copy
c=1
df_comparison_single <- data.frame()
for (d in data) {
df_ods <- read.csv(paste0(original_data,d,".csv"))
sds_list <- readRDS(paste0(data_files,"synthetic/synds_",d,"_m_",c,".rds"))
for (e in privacy) {
for (k in parents) {
for (j in 1:c) {
sds <- read.csv(paste0(synthetic_data,"sds_datasynthesizer_",d,"_k_",k,"_e_",e,"_m_",c,"_n_",j,".csv"))
sds[sds == ""] <- NA
sds <- sds %>%
mutate_if(is.character, as.factor)
# sds_list$syn[[j]] <- sds  # use when m>1
sds_list$syn <- sds # use when m==1
}
utility_measure <- utility.gen(sds_list$syn, df_ods, print.stats = "all", nperms = 3)
output <- data.frame(data = d,
copies = c,
privacy = as.character(e),
parents = as.character(k),
pmse = as.numeric(utility_measure$pMSE),
spmse = as.numeric(utility_measure$S_pMSE),
specks = as.numeric(utility_measure$SPECKS))
df_comparison_single <- rbind(df_comparison_single,output)
}
}
}
df_comparison <- read.csv(paste0(tables,"utility_output.csv"))
df_comparison$copies <- factor(as.character(df_comparison$copies))
df_comparison$parents <- factor(as.character(df_comparison$parents))
df_comparison$privacy <- factor(as.character(df_comparison$privacy))
df_graph <- ggplot(df_comparison, aes(x = privacy, y = specks, fill = parents)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(copies ~ data, labeller = labeller(.rows = label_both)) +
ylab("Kolmogorov-Smirnov (lower is better)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
# legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
# axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"datasynthesizer_optimize_utility.pdf"), height = 4, width = 6)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/benchmark/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load duration data from CTGAN (based on optimized parameterization) ----
data <- c("adult","grid","gridr","sd2011_small","sd2011")
data <- c("sd2011_small","sd2011")
data <- c("sd2011_duration_wo_missing","sd2011_duration_w_missing")
type <- c("ctgan")
df_duration <- data.frame()
for (d in data) {
for (t in type) {
output <- read.csv(paste0(duration,"duration_",t,"_data_",d,".csv")) %>%
filter(epochs == 50 & copies == 1 & j == 1) %>%
select(type, data, duration)
df_duration <- rbind(df_duration,output)
}
}
# Load duration data from datasynthesizer ----
type <- c("datasynthesizer")
for (d in data) {
for (t in type) {
correlated <- read.csv(paste0(duration,"duration_",t,"_correlated_data_",d,".csv"))
independent <- read.csv(paste0(duration,"duration_",t,"_independent_data_",d,".csv"))
output <- rbind(correlated, independent) %>%
filter(parents == 1 & epsilon == 0 & copies == 1 & j == 1) %>%
select(type, data, duration)
df_duration <- rbind(df_duration,output)
}
}
# Load duration data from synthpop ----
type <- c("synthpop")
for (d in data) {
for (t in type) {
output <- read.csv(paste0(duration,"duration_",t,"_data_",d,".csv"))
df_duration <- rbind(df_duration,output)
}
}
df_duration$ratio
# Graph data ----
df_graph <- ggplot(df_duration, aes(x = type, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ data, scales = "free", labeller = labeller(.cols = label_both), nrow = 1) +
xlab("Synthesizer") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_compare_duration.pdf"), height = 4, width = 8)
