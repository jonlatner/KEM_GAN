set.seed(my.seed)
# Combinations ----
df_frequency <- read.csv(paste0(synthetic_data,"synthetic_frequency_cart_factor.csv"))
df_frequency$combine <- factor(df_frequency$combine, levels = sort(levels(df_frequency$combine)))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity", alpha = .05) +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds, alpha = .2) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(readr)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthpop_data = "data_files/synthetic/synthpop/"
datasynthesizer_data = "data_files/synthetic/datasynthesizer/"
setwd(main_dir)
#functions
options(scipen=999)
# load original data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_ods <- as.data.frame(table(df_ods))
df_ods$synthesizer <- "original"
df_ods$combine <- paste(df_ods$var1, df_ods$var2, df_ods$var3, df_ods$var4, sep = "")
df_ods <- df_ods %>%
select(-matches("var"))
df_ods
# Load synthetic data from synthpop ----
df_synthpop <- read_csv(paste0(synthpop_data,"synthpop_frequency.csv"))
df_synthpop$synthesizer <- "synthpop"
df_synthpop
# Load synthetic data from datasynthesizer ----
df_datasynthesizer <- read_csv(paste0(datasynthesizer_data,"datasynthesizer_frequency.csv"))
df_datasynthesizer$synthesizer <- paste0("DP_",df_datasynthesizer$epsilon)
# Graph frequency ----
df_compare <- bind_rows(df_ods,df_synthpop,df_datasynthesizer)  %>%
filter(combine == "1111")
ggplot(df_compare, aes(x = synthesizer, y = Freq)) +
geom_boxplot(position = position_dodge(width=0.9)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_compare <- bind_rows(df_ods,df_synthpop,df_datasynthesizer)
ggplot(df_compare, aes(x = synthesizer, y = Freq)) +
geom_boxplot(position = position_dodge(width=0.9)) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
df_sds$type <- "synthetic"
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Combinations ----
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Loop ----
df_frequency <- data.frame()
for (c in 1:5) {
for (r in 1:16) {
# create seed
my.seed = my.seed + 1
# Load original data
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Drop the last row
df_ods <- head(df_ods, -1)
# Set the last observation to last_record
last_record <- combinations[r,]
print(last_record)
df_ods[1000,] <- last_record
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, method = "cart")
sds <- sds$syn
df_sds <- sds
# Create a frequency table for true original data (unique = 1111)
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency)) %>%
mutate(type = "original",
n = c,
unique = paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = ""))
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
df_sds_frequency$unique <- paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = "")
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency,df_ods_frequency)
}
}
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"), row.names = FALSE)
# Compare frequency ----
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
df_sds$type <- "synthetic"
df_ods$type <- "original"
df_combine <- rbind(df_sds,df_ods)
# Reshape the data for plotting
df_combine_long <- df_combine %>%
pivot_longer(!type, names_to = "variable", values_to = "value") %>%
mutate(value = as.factor(value)) %>%
group_by(type,variable,value) %>%
tally() %>%
group_by(type,variable) %>%
mutate(total = sum(n),
pct = n/total) %>%
ungroup()
df_combine_long
# Plot using facet_wrap
p <- ggplot(df_combine_long, aes(x = value, y=n, fill = type)) +
geom_bar(stat = 'identity',position = position_dodge(.9)) +
geom_text(aes(label = n),vjust = -0.5, size = 4,position = position_dodge(.9)) +
facet_wrap(~variable) +
theme_bw() +
scale_y_continuous(limits = c(0,700), breaks = seq(0,700,100)) +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
axis.title = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
p
# Compare histogram ----
# df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity", alpha = .05) +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds, alpha = .2) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity", alpha = .05) +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity", alpha = .2) +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds, alpha = .2) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity", alpha = .2) +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds, alpha = .5) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Combinations ----
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Loop ----
df_frequency <- data.frame()
for (c in 1:100) {
for (r in 1:16) {
# create seed
my.seed = my.seed + 1
# Load original data
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Drop the last row
df_ods <- head(df_ods, -1)
# Set the last observation to last_record
last_record <- combinations[r,]
print(last_record)
df_ods[1000,] <- last_record
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, method = "cart")
sds <- sds$syn
df_sds <- sds
# Create a frequency table for true original data (unique = 1111)
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency)) %>%
mutate(type = "original",
n = c,
unique = paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = ""))
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
df_sds_frequency$unique <- paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = "")
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency,df_ods_frequency)
}
}
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"), row.names = FALSE)
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
# Compare histogram ----
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 25, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(plot = df_graph, paste0(graphs,"cart_numeric.pdf"), height = 8, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker.pdf"), height = 8, width = 10)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_attacker.pdf"), height = 8, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker.pdf"), height = 6, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker.pdf"), height = 4, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker.pdf"), height = 5, width = 10)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Combinations ----
# Define the 16 possible combinations of four binary variables
combinations <- expand.grid(y1 = c(0, 1), y2 = c(0, 1), y3 = c(0, 1), y4 = c(0, 1))
# Loop ----
df_frequency <- data.frame()
for (c in 1:100) {
for (r in 1:16) {
# create seed
my.seed = my.seed + 1
# Load original data
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Drop the last row
df_ods <- head(df_ods, -1)
# Set the last observation to last_record
last_record <- combinations[r,]
print(last_record)
df_ods[1000,] <- last_record
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, method = "cart", cart.minbucket = 75)
sds <- sds$syn
df_sds <- sds
# Create a frequency table for true original data (unique = 1111)
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency)) %>%
mutate(type = "original",
n = c,
unique = paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = ""))
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
df_sds_frequency$unique <- paste(last_record$y1, last_record$y2, last_record$y3, last_record$y4, sep = "")
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency,df_ods_frequency)
}
}
# Save data ----
# write.csv(df_frequency, paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"), row.names = FALSE)
# df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
# Compare histogram ----
# df_frequency <- read_csv(paste0(synthetic_data,"synthetic_frequency_cart_numeric.csv"))
df_graph_sds <- df_frequency %>%
filter(type == "synthetic")
df_graph_ods <- df_frequency %>%
filter(type == "original")
df_graph_ods <- unique(df_graph_ods)
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), position = position_dodge(width=0.9), stat = "identity") +
geom_boxplot(position = position_dodge(width=0.9), aes(x = combine, y = Freq, fill = type), data = df_graph_sds) +
facet_wrap(~unique, labeller = "label_both") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1, vjust = .5),
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(plot = df_graph, paste0(graphs,"graph_attacker.pdf"), height = 5, width = 10)
ggsave(plot = df_graph, paste0(graphs,"graph_attacker_v2.pdf"), height = 5, width = 10)
