}
par(mfrow = c(1, 2), oma = c(0, 0, 5, 0))
corrplot::corrplot(cor(real_data), tl.col = "black", method = "color",addCoef.col = "black", col = viridis::viridis(200), main = "Real Data", number.cex = 0.5, number.font = 1, cex.main = 0.8, mar = c(0,0,1,0))
corrplot::corrplot(cor(synth_data), tl.col = "black", method = "color",addCoef.col = "black", col = viridis::viridis(200), main = "Synthetic Data", number.cex = 0.5, number.font = 1, cex.main = 0.8, mar = c(0,0,1,0))
mtext(paste0(trial_name, "\nCorrelations"), outer = TRUE, font = 2)
if(save_plots){
dev.off()
}
if (save_plots) {
pdf(
file = paste0(
folder,
ifelse(is.null(folder), "", "/"),
trial_name,
"_distributions.pdf"
),
width = 16,
height = 16
)
}
if(ncol(real_data) < 12){
par(mfrow = c(4, 3), oma = c(0, 0, 4, 0))
}
if(ncol(real_data) >= 12 & ncol(real_data) < 16){
par(mfrow = c(4, 4))
}
if(ncol(real_data) >= 16 & ncol(real_data) < 20){
par(mfrow = c(5, 4))
}
if(ncol(real_data) >= 20 & ncol(real_data) < 25){
par(mfrow = c(5, 5))
}
sapply(1:ncol(real_data), function(x) {
dens_real <- density(real_data[, x])
dens_fake <- density(synth_data[, x])
xlims <-
c(min(c(dens_real$x, dens_fake$x)), max(c(dens_real$x, dens_fake$x)))
ylims <-
c(min(c(dens_real$y, dens_fake$y)), max(c(dens_real$y, dens_fake$y)))
plot(
dens_real,
xlim = xlims,
ylim = ylims,
yaxt = "n",
ylab = "",
lwd = 2,
col = viridis::viridis(2, 0.8)[1],
main = paste0("Column: ", x),
bty = "n"
)
lines(dens_fake,
col = viridis::viridis(3, 0.8)[2],
lwd = 2)
})
plot(
0,
0,
type = "n",
ylab = "",
xlab = "",
main = "",
bty = "n",
yaxt = "n",
xaxt = "n"
)
legend(
"center",
legend = c("Real Data", "Synthetic Data"),
border = NA,
lwd = 2,
col = viridis::viridis(3, 0.8)[1:2],
lty = "solid",
bty = "n"
)
mtext(paste0(trial_name, "\nDensities of Real and Synthetic Data"), font = 2, outer = TRUE)
if(save_plots){
dev.off()
}
}
show_real_synth <-
function(synth_data,
real_data,
trial_name = NULL,
folder = NULL,
save_plots = FALSE) {
if (is.null(trial_name)) {
trial_name <- paste0(round(as.numeric(Sys.time()), 0), "_synthetic_data_trial")
}
cat("\nReal Means: ", colMeans(real_data))
cat("\nSynthetic Means: ", colMeans(synth_data))
cat("\nReal Correlations\n")
print(cor(real_data))
cat("\nSynthetic Correlations\n")
print(cor(synth_data))
if (save_plots) {
pdf(
file = paste0(
folder,
ifelse(is.null(folder), "", "/"),
trial_name,
"_correlations.pdf"
),
width = 16,
height = 9
)
}
par(mfrow = c(1, 2), oma = c(0, 0, 5, 0))
corrplot::corrplot(cor(real_data), tl.col = "black", method = "color",addCoef.col = "black", col = viridis::viridis(200), main = "Real Data", number.cex = 0.5, number.font = 1, cex.main = 0.8, mar = c(0,0,1,0))
corrplot::corrplot(cor(synth_data), tl.col = "black", method = "color",addCoef.col = "black", col = viridis::viridis(200), main = "Synthetic Data", number.cex = 0.5, number.font = 1, cex.main = 0.8, mar = c(0,0,1,0))
mtext(paste0(trial_name, "\nCorrelations"), outer = TRUE, font = 2)
if(save_plots){
dev.off()
}
if (save_plots) {
pdf(
file = paste0(
folder,
ifelse(is.null(folder), "", "/"),
trial_name,
"_distributions.pdf"
),
width = 16,
height = 16
)
}
if(ncol(real_data) < 12){
par(mfrow = c(4, 3), oma = c(0, 0, 4, 0))
}
if(ncol(real_data) >= 12 & ncol(real_data) < 16){
par(mfrow = c(4, 4))
}
if(ncol(real_data) >= 16 & ncol(real_data) < 20){
par(mfrow = c(5, 4))
}
if(ncol(real_data) >= 20 & ncol(real_data) < 25){
par(mfrow = c(5, 5))
}
sapply(1:ncol(real_data), function(x) {
dens_real <- density(real_data[, x])
dens_fake <- density(synth_data[, x])
xlims <-
c(min(c(dens_real$x, dens_fake$x)), max(c(dens_real$x, dens_fake$x)))
ylims <-
c(min(c(dens_real$y, dens_fake$y)), max(c(dens_real$y, dens_fake$y)))
plot(
dens_real,
xlim = xlims,
ylim = ylims,
yaxt = "n",
ylab = "",
lwd = 2,
col = viridis::viridis(2, 0.8)[1],
main = paste0("Column: ", x),
bty = "n"
)
lines(dens_fake,
col = viridis::viridis(3, 0.8)[2],
lwd = 2)
})
plot(
0,
0,
type = "n",
ylab = "",
xlab = "",
main = "",
bty = "n",
yaxt = "n",
xaxt = "n"
)
legend(
"center",
legend = c("Real Data", "Synthetic Data"),
border = NA,
lwd = 2,
col = viridis::viridis(3, 0.8)[1:2],
lty = "solid",
bty = "n"
)
mtext(paste0(trial_name, "\nDensities of Real and Synthetic Data"), font = 2, outer = TRUE)
if(save_plots){
dev.off()
}
}
sample_synthetic_data <-
function(res, n = 5000, sample_noise, device) {
z <-
sample_noise(n,
embedding_dim = attrs$embedding_dim,
device = device)
synth_data <- as_array(res$generator(z)$detach()$cpu())
return(synth_data)
}
data_transformer <- R6::R6Class(
"data_transformer",
lock_objects = FALSE,
public = list(
#' @description
#' Create a new data_transformer object
initialize = function() {
NULL
},
fit_continuous = function(column = NULL, data = NULL) {
data <- data[, 1]
mean <- mean(data, na.rm = TRUE)
std <- sd(data, na.rm = TRUE)
return(
list(
name = column,
z_transform = NULL,
mean = mean,
std = std,
output_info = list(1, "linear"),
output_dimensions = 1
)
)
},
fit_discrete = function(column = NULL, data = NULL) {
column <- column
data <- factor(data[, 1])
levs <- levels(data)
categories <- length(levs)
return(list(
name = column,
levs = levs,
output_info = list(categories, "softmax"),
output_dimensions = categories
))
},
#' @description
#' Fit a data_transformer to data.
#' @param data The data set to transform
#' @param discrete_columns Column ids for columns with discrete/nominal values to be one hot encoded.
#' @examples
#' data <- sample_toydata()
#' transformer <- data_transformer$new()
#' transformer$fit(data)
fit = function(data, discrete_columns = NULL) {
self$output_info <- list()
self$output_dimensions <- 0
self$meta <- list()
if (is.null(colnames(data))) {
col_ids <- 1:ncol(data)
} else {
col_ids <- colnames(data)
}
for (column in col_ids) {
column_data <- data[, which(column == col_ids), drop = F]
if (column %in% discrete_columns) {
meta <- self$fit_discrete(column, column_data)
} else {
meta <- self$fit_continuous(column, column_data)
}
self$output_info[[length(self$output_info) + 1]] <-
meta$output_info
self$ouput_dimensions <-
self$output_dimensions + meta$output_dimensions
self$meta[[length(self$meta) + 1]] <- meta
}
invisible(self)
},
transform_continuous = function(column_meta, data) {
mean <- column_meta$mean
std <- column_meta$std
z <- (data - mean) / std
return(z)
},
transform_discrete = function(column_meta, data) {
oh <- model.matrix( ~ 0 + factor(data, levels = column_meta$levs))
colnames(oh) <- column_meta$levs
oh_na <- array(NA, dim = c(length(data), ncol(oh)))
oh_na[!is.na(data), ] <- oh
colnames(oh_na) <- colnames(oh)
return(oh_na)
},
#' @description
#' Transform data using a fitted data_transformer. (From original format to transformed format.)
#' @param data The data set to transform
#' @examples
#' data <- sample_toydata()
#' transformer <- data_transformer$new()
#' transformer$fit(data)
#' transformed_data <- transformer$transform(data)
transform = function(data) {
values <- list()
for (meta in self$meta) {
column_data <- data[, meta$name]
if ("levs" %in% names(meta)) {
values[[length(values) + 1]] <-
self$transform_discrete(meta, column_data)
} else {
values[[length(values) + 1]] <-
self$transform_continuous(meta, column_data)
}
}
return(do.call(cbind, values))
},
inverse_transform_continuous = function(meta, data) {
mean <- meta$mean
std <- meta$std
u <- data
column <- u * std + mean
return(column)
},
inverse_transform_discrete = function(meta, data) {
levs <- meta$levs
#column <- factor(round(data) %*% 1:length(levs))
#column <- factor(t(apply(data, 1, function(x){
#ranks <- rank(x, ties.method = "random")
#ranks == max(ranks)
#})*1) %*% 1:length(levs))
max_index <- max.col(data, ties.method = "random")
row_col_index <-
stack(setNames(max_index, seq_along(max_index)))
max_matrix <-
Matrix::sparseMatrix(
as.numeric(row_col_index[, 2]),
row_col_index[, 1],
x = 1,
dims = c(max(as.numeric(row_col_index[, 2])), length(levs))
)
column <- factor(as.matrix(max_matrix) %*% 1:length(levs))
levels(column) <- levs
column <- as.numeric(as.character(column))
return(column)
},
#' @description
#' Inverse Transform data using a fitted data_transformer. (From transformed format to original format.)
#' @param data The data set to transform
#' @examples
#' data <- sample_toydata()
#' transformer <- data_transformer$new()
#' transformer$fit(data)
#' transformed_data <- transformer$transform(data)
#' reconstructed_data <- transformer$inverse_transform(transformed_data)
inverse_transform = function(data) {
start <- 1
output <- list()
column_names <- list()
for (meta in self$meta) {
dimensions <- meta$output_dimensions
columns_data <- data[, start:(start + dimensions - 1)]
if ("levs" %in% names(meta)) {
inverted <- self$inverse_transform_discrete(meta, columns_data)
} else {
inverted <- self$inverse_transform_continuous(meta, columns_data)
}
output[[length(output) + 1]] <- inverted
column_names[[length(column_names) + 1]] <- meta$name
start <- start + dimensions
}
output <- do.call("cbind", output)
colnames(output) <- do.call("c", column_names)
return(output)
}
)
)
invert_generator <- function(data, encoder_arch, generator, data_dim, noise_dim, hidden_units = list(128, 128, 128), n_steps = 1000, e_lr = 0.001, device) {
encoder <- encoder_arch(noise_dim = data_dim, data_dim = noise_dim, hidden_units = hidden_units)$to(device = device)
e_optim <-
torch::optim_adam(
encoder$parameters,
lr = e_lr
)
loss <- torch::nn_mse_loss()
e_losses <- NULL
for(i in 1:n_steps){
tmp_data <- torch::torch_tensor(data)
encoding <- encoder(tmp_data)
re_con <- generator(encoding)
e_loss <- loss(tmp_data, re_con)
e_losses <- c(e_losses, as_array(e_loss))
encoder$zero_grad()
e_loss$backward()
e_optim$step()
}
return(list(encoder = encoder,
losses = e_losses))
}
RNGkind("L'Ecuyer-CMRG")
set.seed(230925)
# Set up data
n <- 5000
data <- NULL
for (i in 1:5) {
data <- cbind(data, round(rnorm(n, 100, 20)))
}
for (i in 6:7) {
data <-
cbind(data, round(c(
rnorm(n * 0.3, 100, 10), rnorm(n * 0.7, 50, 15)
)))
}
for (i in 8:10) {
data <-
cbind(data, round(c(
rnorm(n * 0.3, 50, 15), rnorm(n * 0.7, 100, 10)
)))
}
# Normalize data to facilitate GAN training
transformer <- data_transformer$new()
transformer$fit(data)
transformed_data <- transformer$transform(data)
# Run a GAN with the CTGAN settings
set.seed(230925)
res_CTGAN <-
run_experiment(
mb_size = 500,
n_steps = 3000, # 1 epoch is the number of steps it takes to see the entire dataset
real_data = transformed_data,
data_dim = 10,
embedding_dim = 128,
g_hidden_units = list(256, 256),
d_hidden_units = list(256, 256),
adam_betas = c(0.5, 0.9),
d_lr = 2e-4,
g_lr = 2e-4,
d_decay = 1e-6,
g_decay = 1e-6,
GAN_value_fct = WGAN_value_fct,
d_sigmoid = FALSE,
pac = 10,
CTGAN = TRUE
)
show_results(
res_CTGAN,
real_data = transformed_data,
sample_noise = sample_normal,
device = device,
folder = "figures",
trial_name = "CTGAN",
save_plots = TRUE
)
# Invert the Generator to get the latent encodings of the training data
inverted_generator_CTGAN <-
invert_generator(
transformed_data,
Generator,
res_CTGAN$generator,
data_dim = 10,
noise_dim = 128,
device = device
)
# Check if the Inversion worked
plot(1:1000, inverted_generator_CTGAN$losses, type = "l")
# Generate "synthetic" data based on latent codes of real data
# Get latent codes
z_data <-
as_array(inverted_generator_CTGAN$encoder(torch_tensor(transformed_data)))
# Generate synthetic data
show_real_synth(as_array(res_CTGAN$generator(z_data)),
transformed_data,
folder = "figures",
save_plots = TRUE)
# Try with noisy latent codes
z_data_noise <-
z_data + array(rnorm(prod(dim(z_data)), 0, 0.5), dim = dim(z_data))
show_real_synth(as_array(res_CTGAN$generator(z_data_noise)),
transformed_data,
folder = "figures",
save_plots = TRUE)
# A better GAN
# Changes to CTGAN:
# - Discriminator Architecture
# - Generator depth and width (now 3 layers with 128 neurons each, vs. 2 layers with 256 each)
# - Optimizer/Adam Hyperparameters
# - Loss Function, now relativistic Least Square loss
set.seed(230925)
res_CTRGAN_LS_3_128_full <-
run_experiment(
n_steps = 3000,
real_data = transformed_data,
data_dim = 10,
embedding_dim = 128,
g_arch = CTGAN_Generator,
g_hidden_units = list(128, 128, 128),
d_hidden_units = list(128, 128, 128),
adam_betas = c(0.9, 0.999),
d_lr = 0.001,
g_lr = 0.001,
d_decay = 0,
g_decay = 0,
GAN_value_fct = rel_avg_LSGAN_value_fct,
d_sigmoid = FALSE,
pac = 10,
CTGAN = FALSE
)
show_results(
res_CTRGAN_LS_3_128_full,
real_data = transformed_data,
sample_noise = sample_normal,
device = device
)
show_results(
res_CTRGAN_LS_3_128_full,
real_data = transformed_data,
sample_noise = sample_normal,
device = device,
folder = "figures",
trial_name = "Relativistic CTGAN LS 3 128 Full Batch",
save_plots = TRUE
)
inverted_generator_CTRGAN <-
invert_generator(
transformed_data,
Generator,
res_CTRGAN_LS_3_128_full$generator,
data_dim = 10,
noise_dim = 128,
device = device
)
plot(1:1000, inverted_generator_CTRGAN$losses, type = "l")
