id = rep(1:4, each = 6),
period = rep(1:6, times = 4),
status = c(
"unemployed", "nonstandard", "standard", "standard", "standard", "standard",     # id 1
"unemployed", "standard", "standard", "standard", "standard", "standard",        # id 2
rep("unemployed", 6),                                                             # id 3
rep("unemployed", 6)                                                              # id 4
)
)
df_simple <- df_simple %>%
group_by(id) %>%
mutate(
# Generalized treatment: if they ever go through nonstandard work
treated = as.integer(any(status == "nonstandard")),
# Outcome variable: cumulative time in standard work
y = cumsum(if_else(status == "standard", 1, 0)),
) %>%
ungroup() %>%
mutate(emp = ifelse(status != "unemployed", 1, 0),
standard = ifelse(status == "standard", 1, 0),
nonstandard = ifelse(status == "nonstandard", 1, 0),
wages = ifelse(status == "unemployed", yes = 0,
ifelse(status == "nonstandard", yes = 100,
ifelse(status == "standard", yes = 150, no = NA))),
)
df_simple %>% print(n=24)
# 1b. Plot employment status over time for each individual
df_simple %>%
ggplot(aes(x = period, y = wages, group = factor(id), color = factor(status))) +
facet_grid(~id) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Employment Status Over Time by Individual",
x = "Time Period",
y = "Employment Status",
color = "Individual") +
theme_bw() +
theme(legend.position = "bottom")
# 2. Estimate DiD Model (only for treated vs. untreated)
did_model_simple <- lm(wages ~ treated * emp, data = df_simple)
df_simple$yhat_did <- predict(did_model_simple)
print(summary(did_model_simple))
# 3. Estimate Fixed Effects Model
fe_model_simple <- lm(wages ~ emp + nonstandard + factor(id), data = df_simple)
df_simple$yhat_fe <- predict(fe_model_simple)
print(summary(fe_model_simple))
p <- ggplot(df_simple, aes(x = period)) +
geom_line(aes(y = wages, color = "Actual"), size = 1.2) +
geom_line(aes(y = yhat_fe, color = "Fitted (FE)"), linetype = "dashed", size = 1.2) +
geom_line(aes(y = yhat_did, color = "Fitted (DiD)"), linetype = "longdash", size = 1.2) +
facet_wrap(~id) +
geom_text(
data = df_simple %>% filter(period == 5),
aes(
y = yhat_fe + .75,
label = paste("hat(y)[fe]==", round(yhat_fe, 2))
),
size = 3.5,
parse = TRUE
) +
geom_text(
data = df_simple %>% filter(period == 5),
aes(
y = yhat_did - .5,
label = paste("hat(y)[DiD]==", round(yhat_did, 2))
),
size = 3.5,
parse = TRUE
) +
labs(
title = "Actual vs Fitted y by Individual",
y = "Cumulative Time in Standard Employment",
color = "Line"
) +
theme(legend.position = "bottom") +
theme_bw()
p
# 4. Visualize Estimates
# Tidy results for each model
tidy_did_simple <- tidy(did_model_simple)
tidy_fe_simple <- tidy(fe_model_simple)
# Extract just the interaction term
effects_df_simple <- bind_rows(
tidy_did_simple %>% filter(term == "treated:emp") %>% mutate(model = "DiD"),
tidy_fe_simple %>% filter(term == "nonstandard") %>% mutate(model = "Fixed Effects")
) %>%
select(model, estimate, std.error)
ggplot(effects_df_simple, aes(x = model, y = estimate)) +
geom_point(size = 3) +
geom_text(aes(label = round(estimate, 2)), hjust = -1.2, size = 4) +
# scale_y_continuous(limits = c(-5, 5), breaks = seq(-5,5,2)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# geom_errorbar(aes(ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error), width = 0.2) +
labs(title = "Treatment Effect Estimates: DiD vs FE", y = "Estimated Effect", x = "Model") +
theme_bw()
# Part B: Case Where DiD and FE do not Match
# 5. add selection bias
# Assign deterministic employment paths
# Individual 1: Unemployed → Nonstandard (period 2) → Standard (period 3+)
# Individual 2: Unemployed → Standard (period 2+)
# Individual 3: Unemployed → Unemployed → Standard (period 3+)
# Individual 4: Always unemployed
df_sel <- tibble(
id = rep(1:4, each = 6),
period = rep(1:6, times = 4),
status = c(
"unemployed", "nonstandard", "standard", "standard", "standard", "standard",     # id 1
"unemployed", "standard", "standard", "standard", "standard", "standard",        # id 2
"unemployed", "unemployed", "nonstandard", "standard", "standard", "standard", # id 3
rep("unemployed", 6)                                                             # id 4
)
)
df_sel <- df_sel %>%
group_by(id) %>%
mutate(
# Generalized treatment: if they ever go through nonstandard work
treated = as.integer(any(status == "nonstandard")),
# Outcome variable: cumulative time in standard work
y = cumsum(if_else(status == "standard", 1, 0)),
) %>%
ungroup() %>%
mutate(emp = ifelse(status != "unemployed", 1, 0),
standard = ifelse(status == "standard", 1, 0),
nonstandard = ifelse(status == "nonstandard", 1, 0),
wages = ifelse(status == "unemployed", yes = 0,
ifelse(status == "nonstandard", yes = 100,
ifelse(status == "standard", yes = 150, no = NA))),
)
df_sel %>% print(n=24)
# 5b. Plot employment status over time for each individual
df_sel %>%
ggplot(aes(x = period, y = wages, group = factor(id), color = factor(status))) +
facet_grid(~id) +
geom_line(size = 1.2) +
geom_point(size = 2) +
labs(title = "Employment Status Over Time by Individual",
x = "Time Period",
y = "Employment Status",
color = "Individual") +
theme_bw() +
theme(legend.position = "bottom")
# 6. Estimate Fixed Effects Model
fe_model_sel <- lm(wages ~ emp + nonstandard + factor(id), data = df_sel)
df_sel$yhat_fe <- predict(fe_model_sel)
# 7. Estimate DiD Model (only for treated vs. untreated)
did_model_sel <- lm(wages ~ treated * emp, data = df_sel)
df_sel$yhat_did <- predict(did_model_sel)
p <- ggplot(df_sel, aes(x = period)) +
geom_line(aes(y = wages, color = "Actual"), size = 1.2) +
geom_line(aes(y = yhat_fe, color = "Fitted (FE)"), linetype = "dashed", size = 1.2) +
geom_line(aes(y = yhat_did, color = "Fitted (DiD)"), linetype = "longdash", size = 1.2) +
facet_wrap(~id) +
geom_text(
data = df_sel %>% filter(period == 5),
aes(
y = yhat_fe + .75,
label = paste("hat(y)[fe]==", round(yhat_fe, 2))
),
size = 3.5,
parse = TRUE
) +
geom_text(
data = df_sel %>% filter(period == 5),
aes(
y = yhat_did - .5,
label = paste("hat(y)[DiD]==", round(yhat_did, 2))
),
size = 3.5,
parse = TRUE
) +
labs(
title = "Actual vs Fitted y by Individual",
y = "Cumulative Time in Standard Employment",
color = "Line"
) +
theme(legend.position = "bottom") +
theme_bw()
p
# 8. Visualize Estimates
# Tidy results for each model
tidy_did_sel <- tidy(did_model_sel)
tidy_fe_sel <- tidy(fe_model_sel)
# Extract just the interaction term
effects_df_sel <- bind_rows(
tidy_did_sel %>% filter(term == "treated:emp") %>% mutate(model = "DiD"),
tidy_fe_sel %>% filter(term == "nonstandard") %>% mutate(model = "Fixed Effects")
) %>%
select(model, estimate, std.error)
ggplot(effects_df_sel, aes(x = model, y = estimate)) +
geom_point(size = 3) +
geom_text(aes(label = round(estimate, 2)), hjust = -1.2, size = 4) +
# scale_y_continuous(limits = c(-5, 5), breaks = seq(-5,5,2)) +
geom_hline(yintercept = 0, linetype = "dashed") +
# geom_errorbar(aes(ymin = estimate - 1.96 * std.error, ymax = estimate + 1.96 * std.error), width = 0.2) +
labs(title = "Treatment Effect Estimates: DiD vs FE", y = "Estimated Effect", x = "Model") +
theme_minimal()
View(df_simple)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1237
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
cp = c("0.00000001", "0.0001", "0.01", "0.05")
df_frequency <- data.frame()
for (i in cp) {
for (n in 1:10) {
# create seed
my.seed = my.seed + 1
parameter = i
# Create fake synthetic data
# formals(syn.cart)
sds <- syn(df_ods, m = 1, seed = my.seed, cart.cp = parameter)
sds <- sds$syn
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- n
df_sds_frequency$cp <- parameter
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
}
head(df_frequency)
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_cart_modified_10_cp.csv"), row.names = FALSE)
# Compare histogram ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_cart_modified_10_cp.csv"))
df_graph_sds <- df_frequency
df_graph_sds
df_test <- data.frame()
for (i in cp) {
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_ods_frequency$cp <- i
df_test <- rbind(df_test,df_ods_frequency)
}
df_ods_frequency <- df_test
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
facet_wrap(~cp) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 45, hjust = 1),   # <--- rotate labels
axis.title.x = element_blank(),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_modified_cp_histogram_compare_10_v2.pdf"), height = 4, width = 6, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(ggh4x) # facet_nested
library(readr)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
setwd(main_dir)
#functions
options(scipen=999)
# Set seed for reproducibility
my.seed = 1234
set.seed(my.seed)
# Load data ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
# Loop ----
minbucket = c(5, 25, 50, 75)
df_frequency <- data.frame()
for (mb in minbucket) {
for (c in 1:10) {
# create seed
my.seed = my.seed + 1
# Create fake synthetic data
sds <- syn(df_ods, m = 1, seed = my.seed, cart.minbucket = mb)
sds <- sds$syn
# Create a frequency table for synthetic data
sds$combine <- paste(sds$var1, sds$var2, sds$var3, sds$var4, sep = "")
sds <- sds %>%
select(-matches("var"))
df_sds_frequency <- as.data.frame(table(sds))
df_sds_frequency$type <- "synthetic"
df_sds_frequency$n <- c
df_sds_frequency$mb <- mb
# Combine
df_frequency <- rbind(df_frequency,df_sds_frequency)
}
}
df_frequency
# Save data ----
write.csv(df_frequency, paste0(synthetic_data,"synthetic_cart_modified_10_mb.csv"), row.names = FALSE)
# Compare histogram ----
df_ods <- read.csv(paste0(original_data,"simulated.csv"))
df_frequency <- read_csv(paste0(synthetic_data,"synthetic_cart_modified_10_mb.csv"))
df_graph_sds <- df_frequency
df_test <- data.frame()
for (mb in minbucket) {
df_ods_frequency <- df_ods
df_ods_frequency$combine <- paste(df_ods_frequency$var1, df_ods_frequency$var2, df_ods_frequency$var3, df_ods_frequency$var4, sep = "")
df_ods_frequency <- df_ods_frequency %>%
select(-matches("var"))
df_ods_frequency <- as.data.frame(table(df_ods_frequency))
df_ods_frequency$pct <- (df_ods_frequency$Freq / nrow(df_ods)) * 100
df_ods_frequency$type <- "original"
df_ods_frequency$mb <- mb
df_test <- rbind(df_test,df_ods_frequency)
}
df_ods_frequency <- df_test
df_graph_ods <- df_ods_frequency
df_graph <-
ggplot() +
geom_bar(data = df_graph_ods, aes(x = combine, y = Freq, fill = type), stat = "identity") +
geom_boxplot(data = df_graph_sds, aes(x = combine, y = Freq, fill = type), alpha = .2) +
scale_y_continuous(limits = c(0,100), breaks = seq(0,100,10)) +
facet_wrap(~mb) +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.title.x = element_blank(),
axis.text.x = element_text(angle = 45, hjust = 1),   # <--- rotate labels
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(df_graph, filename = paste0(graphs,"graph_cart_modified_mb_histogram_compare_10_v2.pdf"), height = 4, width = 6, units = "in")
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(synthpop)
library(tidyverse)
library(xtable)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/projects/simulation/"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/synthpop/"
graphs = "graphs/"
tables = "tables/"
setwd(main_dir)
#functions
options(scipen=999)
# Load data ----
ods <- SD2011[, c("sex", "age", "region","placesize","depress")]
# original ----
s5 <- syn(ods, seed = 8564, m = 5, print.flag = FALSE)
t5 <- disclosure( s5, ods, keys = c("sex", "age", "region", "placesize"), target = "depress", print.flag = FALSE)
ttest1 <- print(t5, to.print = "allCAPs")
repU <- t5$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(t5$ident$UiO[1], repU, average_row)
DiSCO <- t5$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(t5$attrib$Dorig[1], DiSCO, average_row)
# create table
df_risk_1 <- data.frame(
data = c("Original data", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk_1,align = "llrr")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
file = paste0(tables,"table_disclosure_risk_sd2011_original.tex"))
# modified ----
s6 <- s5
for (c in 1:5) {
sds <- data.frame(s5$syn[c])
sds$depress <- 0
s6$syn[[c]] <- sds
}
t6 <- disclosure( s6, ods, keys = c("sex", "age", "region", "placesize"), target = "depress", print.flag = FALSE)
ttest2 <- print(t6, to.print = "allCAPs")
repU <- t6$ident$repU
average_row <- mean(repU) # calculate average row across 10 synthetic data sets
repU <- c(t6$ident$UiO[1], repU, average_row)
DiSCO <- t6$attrib$DiSCO
average_row <- mean(DiSCO) # calculate average row across 10 synthetic data sets
DiSCO <- c(t6$attrib$Dorig[1], DiSCO, average_row)
# create table
df_risk_2 <- data.frame(
data = c("Original data", "Synthetic 1", "Synthetic 2", "Synthetic 3", "Synthetic 4", "Synthetic 5", "Average"),
identity = c(repU),
attribute = c(DiSCO)
)
# Create the xtable object
latex_table <- xtable(df_risk_2,align = "llrr")
print.xtable(latex_table,
include.rownames = FALSE,
# include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
sanitize.text.function = identity,
file = paste0(tables,"table_disclosure_risk_sd2011_modified.tex"))
# combine ----
df_risk_1$type <- "Original"
df_risk_2$type <- "Modified"
df_risk <- rbind(df_risk_1,df_risk_2) %>%
pivot_longer(!c(data,type)) %>%
pivot_wider(names_from = c(name, type), values_from = c(value)) %>%
select(data, identity_Original, identity_Modified, attribute_Original, attribute_Modified)
df_risk
columns_header_top <- c("
\\toprule &
\\multicolumn{2}{l}{Identity risk ($repU$)} &
\\multicolumn{2}{l}{Attribute risk ($DiSCO$)}
\\\\  \n
\\cmidrule(lr){2-3}
\\cmidrule(lr){4-5}
")
columns_header_mid <- c("
Data & Raab et al., 2024 & Modified & Raab et al., 2024 & Modified
\\\\ \n
\\midrule
")
notes <- c("\\bottomrule \\\\[-1.8ex] \\multicolumn{5}{p{5in}}{Note: Modified indicates that values of \\texttt{depress}=0 for all records in the synthetic data} \n")
# Create the xtable object
latex_table <- xtable(df_risk,align = "llrrrr")
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
sanitize.text.function = identity,
add.to.row = list(
pos = list(0,0,6,7),
command = c(columns_header_top,
columns_header_mid,
"\\midrule\n",   # midrule on line 6
notes)),
file = paste0(tables,"table_disclosure_risk_sd2011.tex"))
ttest1$allCAPs
ttest2$allCAPs
print.xtable(latex_table,
include.rownames = FALSE,
include.colnames = FALSE,
floating = FALSE,
booktabs = TRUE,
hline.after = NULL,
sanitize.text.function = identity,
add.to.row = list(
pos = list(0,0,1,6,7),
command = c(columns_header_top,
columns_header_mid,
"\\midrule\n",   # midrule on line 6
"\\midrule\n",   # midrule on line 6
notes)),
file = paste0(tables,"table_disclosure_risk_sd2011.tex"))
