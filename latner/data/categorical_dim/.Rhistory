import time
start_time = time.time()
# execute a task
def task(arg):
# generate a random value between 0 and 1
value = random()
# block for a fraction of a second
sleep(value)
# report a message
print(f'.done {arg}, generated {value}', flush=True)
# protect the entry point
if __name__ == '__main__':
# create all tasks
processes = [Process(target=task, args=(i,)) for i in range(20)]
# start all processes
for process in processes:
process.start()
# wait for all processes to complete
for process in processes:
process.join()
# report that all tasks are completed
print('Done', flush=True)
end_time = time.time()
print(round(end_time - start_time,2))
library(tidyverse)
options(scipen=999)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
library(readxl)
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"),sep = ";")
df <- read_excel(paste0("/Users/jonathanlatner/Downloads/Task Ratings.xlsx"))
df
View(df)
reticulate::repl_python()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("brms")
install.packages("brms",dependencies = TRUE)
install.packages("rstan",dependencies = TRUE)
library(rstan)
example(stan_model, package = "rstan", run.dontrun = TRUE)
# Detach if loaded
if ("bayesintro" %in% (.packages())) {
detach(package:bayesintro, unload = TRUE)
}
# Uninstall if installed
if ("bayesintro" %in% installed.packages()) {
remove.packages("bayesintro")
}
# Install if not installed
if (!("devtools" %in% installed.packages())) {
install.packages("devtools")
}
# Load from GitHub
library(devtools)
devtools::install_github("denis-cohen/bayesintro")
# Load to library
library(bayesintro)
learnr::run_tutorial("00-00-int", package = "bayesintro")
learnr::run_tutorial("01-01-lec", package = "bayesintro")
# Load to library
library(bayesintro)
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
library(bayesintro)
# Run tutorials (one at a time)
# learnr::run_tutorial("00-00-int", package = "bayesintro")
# learnr::run_tutorial("01-01-lec", package = "bayesintro")
# learnr::run_tutorial("01-02-lec", package = "bayesintro")
learnr::run_tutorial("01-03-lab", package = "bayesintro")
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/continuous_dim/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/continuous_dim/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load data ----
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_baseline.csv"))
# Load CTGAN duration data ----
# duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
# duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
# duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
#
# duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
# duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
# duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
#
# duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
# duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
# duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
#
# df_ctgan <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
#                      duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
#                      duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
# )
#
# df_ctgan <- df_ctgan %>%
#   filter(epochs == 50,
#          batch_size == 1000) %>%
#   select(type, rows, cols, n, duration)
# Merge ----
df_merge <- rbind(df_synthpop,df_datasynthesizer,df_ctgan)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/continuous_dim/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load data ----
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_baseline.csv"))  %>%
select(-epochs,-batch_size)
# Load CTGAN duration data ----
# duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
# duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
# duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
#
# duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
# duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
# duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
#
# duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
# duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
# duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
#
# df_ctgan <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
#                      duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
#                      duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
# )
#
# df_ctgan <- df_ctgan %>%
#   filter(epochs == 50,
#          batch_size == 1000) %>%
#   select(type, rows, cols, n, duration)
# Merge ----
df_merge <- rbind(df_synthpop,df_datasynthesizer,df_ctgan)
df_merge$rows <- as.factor(df_merge$rows)
df_merge
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = rows, y = duration, fill = type)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ cols, scales = "free", labeller = labeller(.cols = label_both)) +
xlab("Rows") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(plot = df_graph, paste0(graphs,"graph_compare_duration.pdf"), height = 6, width = 10)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/continuous_dim/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load data ----
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_ctgan_baseline <- read.csv(paste0(duration,"duration_ctgan_baseline.csv"))  %>%
select(type, rows, cols, n, duration) %>%
mutate(type = "CTGAN (300 epochs)")
# Load CTGAN duration data ----
duration_ctgan_rows_50000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_10.csv"))
duration_ctgan_rows_50000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_15.csv"))
duration_ctgan_rows_50000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_50000_cols_20.csv"))
duration_ctgan_rows_100000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_10.csv"))
duration_ctgan_rows_100000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_15.csv"))
duration_ctgan_rows_100000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_100000_cols_20.csv"))
duration_ctgan_rows_200000_cols_10 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_10.csv"))
duration_ctgan_rows_200000_cols_15 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_15.csv"))
duration_ctgan_rows_200000_cols_20 <- read.csv(paste0(duration,"duration_ctgan_rows_200000_cols_20.csv"))
df_ctgan <- rbind(duration_ctgan_rows_50000_cols_10,duration_ctgan_rows_50000_cols_15,duration_ctgan_rows_50000_cols_20,
duration_ctgan_rows_100000_cols_10,duration_ctgan_rows_100000_cols_15,duration_ctgan_rows_100000_cols_20,
duration_ctgan_rows_200000_cols_10,duration_ctgan_rows_200000_cols_15,duration_ctgan_rows_200000_cols_20
)
df_ctgan_50 <- df_ctgan %>%
filter(epochs == 50,
batch_size == 500) %>%
select(type, rows, cols, n, duration) %>%
mutate(type = "CTGAN (50 epochs)")
# Merge ----
df_merge <- rbind(df_synthpop,df_datasynthesizer,df_ctgan_baseline,df_ctgan_50)
df_merge$rows <- as.factor(df_merge$rows)
df_merge
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = rows, y = duration, fill = type)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_wrap( ~ cols, scales = "free", labeller = labeller(.cols = label_both)) +
xlab("Rows") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(plot = df_graph, paste0(graphs,"graph_compare_duration.pdf"), height = 6, width = 10)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/categorical_dim//"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
duration <- read.csv(paste0(duration,"duration_ctgan_compare_epochs.csv"))
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
# Top commands ----
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x) # facet_nested
# FOLDERS - ADAPT THIS PATHWAY
# main_dir = "N:/Ablagen/D01700-KEM/Latner/little_etal_2021/"
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/categorical_dim//"
data_files = "data_files/"
original_data = "data_files/original/"
synthetic_data = "data_files/synthetic/ctgan/"
graphs = "graphs/"
tables = "tables/ctgan/"
duration = "duration/"
setwd(main_dir)
# Load data ----
df_duration <- read.csv(paste0(duration,"duration_ctgan_compare_epochs.csv"))
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
df_duration <- read.csv(paste0(duration,"duration_ctgan_compare_epochs.csv"))
# Graph data ----
df_duration$epochs <- as.factor(df_duration$epochs)
df_duration$rows <- as.factor(df_duration$rows)
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + batch_size, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + values, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
df_graph <- ggplot(df_duration, aes(x = epochs, y = duration)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested(cols ~ rows + vals, scales = "free", labeller = labeller(.cols = label_both, .rows = label_both)) +
xlab("Epochs") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.text.x = element_text(angle = 90, hjust = 1),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
ggsave(plot = df_graph, paste0(graphs,"graph_compare_ctgan_duration.pdf"), height = 6, width = 10)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/IAB/simulation_data/categorical_dim/"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/categorical_dim//"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load data ----
# df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/categorical_dim//"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load data ----
# df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_compare_epochs.csv")) %>%
filter(epochs=300) %>%
select(-epochs)
# Top commands ----
# https://alfurka.github.io/2023-01-30-creating-synthetic-values-with-synthepop-cart/
# Create empty R application (no figures, data frames, packages, etc.)
# Get a list of all loaded packages
packages <- search()[grepl("package:", search())]
# Unload each package
for (package in packages) {
unloadNamespace(package)
}
rm(list=ls(all=TRUE))
# load library
library(tidyverse)
library(synthpop)
library(ggh4x)
# FOLDERS - ADAPT THIS PATHWAY
main_dir = "/Users/jonathanlatner/Documents/GitHub/KEM_GAN/latner/data/categorical_dim//"
data_files = "data_files/"
duration = "duration/"
graphs = "graphs/"
setwd(main_dir)
# Load data ----
# df_ctgan <- read.csv(paste0(duration,"duration_ctgan_0.csv"))
df_synthpop <- read.csv(paste0(duration,"duration_synthpop_0.csv"))
df_datasynthesizer <- read.csv(paste0(duration,"duration_datasynthesizer_0.csv"))
df_ctgan <- read.csv(paste0(duration,"duration_ctgan_compare_epochs.csv")) %>%
filter(epochs==300) %>%
select(-epochs)
df_merge <- rbind(df_ctgan,df_synthpop,df_datasynthesizer)
df_merge$rows <- as.factor(df_merge$rows)
# Graph data ----
df_graph <- ggplot(df_merge, aes(x = rows, y = duration, fill = type)) +
geom_bar(stat="identity",position = position_dodge2()) +
facet_nested_wrap( ~ cols + vals, scales = "free", labeller = labeller(.cols = label_both), nrow = 3) +
xlab("Observations") +
ylab("Duration (in seconds)") +
theme_bw() +
theme(panel.grid.minor = element_blank(),
legend.position = "bottom",
legend.title = element_blank(),
legend.key.width=unit(1, "cm"),
axis.line.y = element_line(color="black", linewidth=.5),
axis.line.x = element_line(color="black", linewidth=.5)
)
df_graph
# ggsave(plot = df_graph, paste0(graphs,"graph_compare_duration.pdf"), height = 6, width = 10)
